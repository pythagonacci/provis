{
  "id": "cap_item_{email_id}_ai-edit",
  "name": "item/{email_id}/ai-edit",
  "purpose": "Receive Email Request",
  "title": "item/{email_id}/ai-edit",
  "status": "healthy",
  "anchors": [
    {
      "path": "backend/app/routers/email.py",
      "kind": "api",
      "route": "/item/{email_id}/ai-edit"
    }
  ],
  "lanes": {
    "web": [],
    "api": [
      {
        "path": "backend/app/__init__.py"
      },
      {
        "path": "backend/app/config.py"
      },
      {
        "path": "backend/app/database.py"
      },
      {
        "path": "backend/app/main.py"
      },
      {
        "path": "backend/app/models/__init__.py"
      },
      {
        "path": "backend/app/models/deck.py"
      },
      {
        "path": "backend/app/models/email.py"
      },
      {
        "path": "backend/app/models/prospect.py"
      },
      {
        "path": "backend/app/routers/__init__.py"
      },
      {
        "path": "backend/app/routers/deck.py"
      },
      {
        "path": "backend/app/routers/email.py"
      },
      {
        "path": "backend/app/routers/prospect.py"
      },
      {
        "path": "backend/app/schemas/__init__.py"
      },
      {
        "path": "backend/app/schemas/deck.py"
      },
      {
        "path": "backend/app/schemas/email.py"
      },
      {
        "path": "backend/app/schemas/prospect.py"
      },
      {
        "path": "backend/app/services/__init__.py"
      },
      {
        "path": "backend/app/services/ai.py"
      },
      {
        "path": "backend/app/services/emailgeneration.py"
      },
      {
        "path": "backend/app/services/pdf.py"
      },
      {
        "path": "backend/app/services/slides.py"
      },
      {
        "path": "backend/app/services/utils.py"
      },
      {
        "path": "backend/app/templates/deck.html"
      },
      {
        "path": "backend/migrate_add_phone.py"
      },
      {
        "path": "backend/requirements.txt"
      },
      {
        "path": "backend/static/init"
      }
    ],
    "workers": [],
    "other": []
  },
  "flow": [
    {
      "from": "backend/app/config.py",
      "to": "__future__",
      "kind": "call"
    },
    {
      "from": "backend/app/config.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/config.py",
      "to": "pydantic",
      "kind": "call"
    },
    {
      "from": "backend/app/database.py",
      "to": "sqlalchemy.orm",
      "kind": "call"
    },
    {
      "from": "backend/app/main.py",
      "to": "__future__",
      "kind": "call"
    },
    {
      "from": "backend/app/main.py",
      "to": "fastapi",
      "kind": "call"
    },
    {
      "from": "backend/app/main.py",
      "to": "database",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/prospect.py",
      "to": "fastapi",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/prospect.py",
      "to": "sqlalchemy.orm",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/prospect.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/prospect.py",
      "to": "database",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "fastapi",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "sqlalchemy.orm",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "pydantic",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "database",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "models.prospect",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/email.py",
      "to": "__future__",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/email.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/email.py",
      "to": "fastapi",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/email.py",
      "to": "sqlalchemy.orm",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/email.py",
      "to": "pydantic",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/email.py",
      "to": "database",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/email.py",
      "to": "models.prospect",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/email.py",
      "to": "models.email",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/email.py",
      "to": "schemas.email",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/email.py",
      "to": "services.emailgeneration",
      "kind": "call"
    },
    {
      "from": "backend/app/models/prospect.py",
      "to": "sqlalchemy.orm",
      "kind": "call"
    },
    {
      "from": "backend/app/models/prospect.py",
      "to": "database",
      "kind": "call"
    },
    {
      "from": "backend/app/models/deck.py",
      "to": "sqlalchemy.orm",
      "kind": "call"
    },
    {
      "from": "backend/app/models/deck.py",
      "to": "database",
      "kind": "call"
    },
    {
      "from": "backend/app/models/email.py",
      "to": "__future__",
      "kind": "call"
    },
    {
      "from": "backend/app/models/email.py",
      "to": "sqlalchemy.orm",
      "kind": "call"
    },
    {
      "from": "backend/app/models/email.py",
      "to": "database",
      "kind": "call"
    },
    {
      "from": "backend/app/schemas/prospect.py",
      "to": "pydantic",
      "kind": "call"
    },
    {
      "from": "backend/app/schemas/prospect.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/schemas/deck.py",
      "to": "__future__",
      "kind": "call"
    },
    {
      "from": "backend/app/schemas/deck.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/schemas/deck.py",
      "to": "pydantic",
      "kind": "call"
    },
    {
      "from": "backend/app/schemas/email.py",
      "to": "__future__",
      "kind": "call"
    },
    {
      "from": "backend/app/schemas/email.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/schemas/email.py",
      "to": "pydantic",
      "kind": "call"
    },
    {
      "from": "backend/app/services/emailgeneration.py",
      "to": "__future__",
      "kind": "call"
    },
    {
      "from": "backend/app/services/emailgeneration.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/services/ai.py",
      "to": "__future__",
      "kind": "call"
    },
    {
      "from": "backend/app/services/ai.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/services/pdf.py",
      "to": "__future__",
      "kind": "call"
    },
    {
      "from": "backend/app/services/pdf.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/services/slides.py",
      "to": "typing",
      "kind": "call"
    }
  ],
  "data": {
    "inputs": [
      {
        "path": "backend/app/routers/email.py",
        "why": "Handles incoming email requests."
      },
      {
        "path": "backend/app/routers/prospect.py",
        "why": "Handles incoming prospect requests."
      },
      {
        "path": "backend/app/routers/deck.py",
        "why": "Handles incoming deck requests."
      }
    ],
    "stores": [
      {
        "path": "backend/app/database.py",
        "why": "Defines the database connection and ORM setup."
      },
      {
        "path": "backend/app/models/email.py",
        "why": "Defines the Email model for database storage."
      },
      {
        "path": "backend/app/models/prospect.py",
        "why": "Defines the Prospect model for database storage."
      },
      {
        "path": "backend/app/models/deck.py",
        "why": "Defines the Deck model for database storage."
      }
    ],
    "externals": [
      {
        "path": "fastapi",
        "why": "Framework used for building the web application."
      },
      {
        "path": "sqlalchemy.orm",
        "why": "Used for ORM functionality with the database."
      },
      {
        "path": "pydantic",
        "why": "Used for data validation and settings management."
      }
    ]
  },
  "entrypoints": [
    "backend/app/routers/email.py"
  ],
  "entryPoints": [
    "backend/app/routers/email.py"
  ],
  "swimlanes": {
    "web": [],
    "api": [
      "backend/app/__init__.py",
      "backend/app/config.py",
      "backend/app/database.py",
      "backend/app/main.py",
      "backend/app/models/__init__.py",
      "backend/app/models/deck.py",
      "backend/app/models/email.py",
      "backend/app/models/prospect.py",
      "backend/app/routers/__init__.py",
      "backend/app/routers/deck.py",
      "backend/app/routers/email.py",
      "backend/app/routers/prospect.py",
      "backend/app/schemas/__init__.py",
      "backend/app/schemas/deck.py",
      "backend/app/schemas/email.py",
      "backend/app/schemas/prospect.py",
      "backend/app/services/__init__.py",
      "backend/app/services/ai.py",
      "backend/app/services/emailgeneration.py",
      "backend/app/services/pdf.py",
      "backend/app/services/slides.py",
      "backend/app/services/utils.py",
      "backend/app/templates/deck.html",
      "backend/migrate_add_phone.py",
      "backend/requirements.txt",
      "backend/static/init"
    ],
    "workers": [],
    "other": []
  },
  "control_flow": [],
  "data_flow": {
    "inputs": [],
    "stores": [],
    "externals": []
  },
  "policies": [
    {
      "path": "backend/app/services/emailgeneration.py",
      "why": "Contains business logic for email generation policies.",
      "type": "unknown"
    },
    {
      "path": "backend/app/services/slides.py",
      "why": "Contains business logic for slide generation policies.",
      "type": "unknown"
    },
    {
      "path": "backend/app/services/pdf.py",
      "why": "Contains business logic for PDF generation policies.",
      "type": "unknown"
    }
  ],
  "contracts": [
    {
      "path": "backend/app/schemas/email.py",
      "why": "Defines the schema for email data validation."
    },
    {
      "path": "backend/app/schemas/prospect.py",
      "why": "Defines the schema for prospect data validation."
    },
    {
      "path": "backend/app/schemas/deck.py",
      "why": "Defines the schema for deck data validation."
    }
  ],
  "summaries": {
    "file": {
      "backend/app/routers/email.py": "",
      "__future__": "",
      "typing": "",
      "fastapi": "",
      "sqlalchemy.orm": "",
      "pydantic": "",
      "database": "",
      "models.prospect": "",
      "models.email": "",
      "schemas.email": "",
      "services.emailgeneration": "",
      "backend/app/config.py": "",
      "backend/app/main.py": "",
      "backend/app/models/email.py": "",
      "backend/app/schemas/deck.py": "",
      "backend/app/schemas/email.py": "",
      "backend/app/services/emailgeneration.py": "",
      "backend/app/services/ai.py": "",
      "backend/app/services/pdf.py": "",
      "backend/app/routers/prospect.py": "",
      "backend/app/routers/deck.py": "",
      "backend/app/schemas/prospect.py": "",
      "backend/app/services/slides.py": "",
      "backend/app/database.py": "",
      "backend/app/models/prospect.py": "",
      "backend/app/models/deck.py": ""
    },
    "folder": {
      "backend/app": ""
    },
    "narrative": [
      {
        "label": "Receive Email Request",
        "detail": "The system receives an email request at the endpoint /item/{email_id}/ai-edit.",
        "scenario": "A user sends a request to edit an email."
      },
      {
        "label": "Validate Email ID",
        "detail": "The system validates the provided email ID to ensure it exists in the database.",
        "scenario": "The email ID is valid and exists in the database."
      },
      {
        "label": "Fetch Email Data",
        "detail": "The system retrieves the email data associated with the validated email ID from the database.",
        "scenario": "The email data is successfully fetched."
      },
      {
        "label": "Process AI Editing",
        "detail": "The system processes the email data using AI algorithms to generate edits.",
        "scenario": "AI processing completes without errors."
      },
      {
        "label": "Generate Edited Email",
        "detail": "The system generates the edited version of the email based on AI processing results.",
        "scenario": "The edited email is successfully generated."
      },
      {
        "label": "Return Edited Email",
        "detail": "The system sends the edited email back to the user as a response.",
        "scenario": "The edited email is returned successfully."
      }
    ]
  },
  "keyFiles": [
    "__future__",
    "backend/app/routers/email.py",
    "database",
    "pydantic",
    "sqlalchemy.orm",
    "typing"
  ],
  "steps": [
    {
      "title": "Receive Email Request",
      "description": "The system receives an email request at the endpoint /item/{email_id}/ai-edit.",
      "fileId": "backend/app/routers/email.py"
    },
    {
      "title": "Validate Email ID",
      "description": "The system validates the provided email ID to ensure it exists in the database.",
      "fileId": null
    },
    {
      "title": "Fetch Email Data",
      "description": "The system retrieves the email data associated with the validated email ID from the database.",
      "fileId": null
    },
    {
      "title": "Process AI Editing",
      "description": "The system processes the email data using AI algorithms to generate edits.",
      "fileId": null
    },
    {
      "title": "Generate Edited Email",
      "description": "The system generates the edited version of the email based on AI processing results.",
      "fileId": null
    },
    {
      "title": "Return Edited Email",
      "description": "The system sends the edited email back to the user as a response.",
      "fileId": null
    }
  ],
  "dataIn": [],
  "dataOut": [],
  "orchestrators": [],
  "sources": [
    "backend/app/routers/email.py"
  ],
  "sinks": [],
  "controlFlow": [],
  "dataFlow": {
    "inputs": [],
    "stores": [],
    "externals": []
  },
  "nodeIndex": {
    "backend/app/services/__init__.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/services/pdf.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/routers/__init__.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/routers/email.py": {
      "role": "entrypoint",
      "lane": "web"
    },
    "backend/app/routers/deck.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/routers/prospect.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/models/prospect.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/schemas/__init__.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/main.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/services/slides.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/services/emailgeneration.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/models/deck.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/models/__init__.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/schemas/deck.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/database.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/__init__.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/config.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/requirements.txt": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/schemas/email.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/templates/deck.html": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/migrate_add_phone.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/services/ai.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/static/init": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/models/email.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/services/utils.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/schemas/prospect.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    }
  },
  "suspectRank": [],
  "recentChanges": []
}