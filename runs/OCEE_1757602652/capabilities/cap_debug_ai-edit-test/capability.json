{
  "id": "cap_debug_ai-edit-test",
  "name": "debug/ai-edit-test",
  "purpose": "Initialize Application",
  "title": "debug/ai-edit-test",
  "status": "healthy",
  "anchors": [
    {
      "path": "backend/app/routers/deck.py",
      "kind": "api",
      "route": "/debug/ai-edit-test"
    }
  ],
  "lanes": {
    "web": [],
    "api": [
      {
        "path": "backend/app/__init__.py"
      },
      {
        "path": "backend/app/config.py"
      },
      {
        "path": "backend/app/database.py"
      },
      {
        "path": "backend/app/main.py"
      },
      {
        "path": "backend/app/models/__init__.py"
      },
      {
        "path": "backend/app/models/deck.py"
      },
      {
        "path": "backend/app/models/email.py"
      },
      {
        "path": "backend/app/models/prospect.py"
      },
      {
        "path": "backend/app/routers/__init__.py"
      },
      {
        "path": "backend/app/routers/deck.py"
      },
      {
        "path": "backend/app/routers/email.py"
      },
      {
        "path": "backend/app/routers/prospect.py"
      },
      {
        "path": "backend/app/schemas/__init__.py"
      },
      {
        "path": "backend/app/schemas/deck.py"
      },
      {
        "path": "backend/app/schemas/email.py"
      },
      {
        "path": "backend/app/schemas/prospect.py"
      },
      {
        "path": "backend/app/services/__init__.py"
      },
      {
        "path": "backend/app/services/ai.py"
      },
      {
        "path": "backend/app/services/emailgeneration.py"
      },
      {
        "path": "backend/app/services/pdf.py"
      },
      {
        "path": "backend/app/services/slides.py"
      },
      {
        "path": "backend/app/services/utils.py"
      },
      {
        "path": "backend/app/templates/deck.html"
      },
      {
        "path": "backend/migrate_add_phone.py"
      },
      {
        "path": "backend/requirements.txt"
      },
      {
        "path": "backend/static/init"
      }
    ],
    "workers": [],
    "other": []
  },
  "flow": [
    {
      "from": "backend/app/config.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/config.py",
      "to": "pydantic",
      "kind": "call"
    },
    {
      "from": "backend/app/database.py",
      "to": "sqlalchemy.orm",
      "kind": "call"
    },
    {
      "from": "backend/app/database.py",
      "to": "config",
      "kind": "call"
    },
    {
      "from": "backend/app/main.py",
      "to": "fastapi",
      "kind": "call"
    },
    {
      "from": "backend/app/main.py",
      "to": "config",
      "kind": "call"
    },
    {
      "from": "backend/app/main.py",
      "to": "database",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/prospect.py",
      "to": "fastapi",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/prospect.py",
      "to": "sqlalchemy.orm",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/prospect.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/prospect.py",
      "to": "database",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "json",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "fastapi",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "sqlalchemy.orm",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "pydantic",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "database",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "models.prospect",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "models.deck",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "schemas.deck",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "services.ai",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "services.pdf",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "services.slides",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/deck.py",
      "to": "config",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/email.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/email.py",
      "to": "fastapi",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/email.py",
      "to": "sqlalchemy.orm",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/email.py",
      "to": "pydantic",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/email.py",
      "to": "database",
      "kind": "call"
    },
    {
      "from": "backend/app/routers/email.py",
      "to": "models.prospect",
      "kind": "call"
    },
    {
      "from": "backend/app/models/prospect.py",
      "to": "sqlalchemy.orm",
      "kind": "call"
    },
    {
      "from": "backend/app/models/prospect.py",
      "to": "database",
      "kind": "call"
    },
    {
      "from": "backend/app/models/deck.py",
      "to": "sqlalchemy.orm",
      "kind": "call"
    },
    {
      "from": "backend/app/models/deck.py",
      "to": "database",
      "kind": "call"
    },
    {
      "from": "backend/app/models/email.py",
      "to": "sqlalchemy.orm",
      "kind": "call"
    },
    {
      "from": "backend/app/models/email.py",
      "to": "database",
      "kind": "call"
    },
    {
      "from": "backend/app/schemas/prospect.py",
      "to": "pydantic",
      "kind": "call"
    },
    {
      "from": "backend/app/schemas/prospect.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/schemas/deck.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/schemas/deck.py",
      "to": "pydantic",
      "kind": "call"
    },
    {
      "from": "backend/app/schemas/email.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/schemas/email.py",
      "to": "pydantic",
      "kind": "call"
    },
    {
      "from": "backend/app/services/emailgeneration.py",
      "to": "json",
      "kind": "call"
    },
    {
      "from": "backend/app/services/emailgeneration.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/services/emailgeneration.py",
      "to": "config",
      "kind": "call"
    },
    {
      "from": "backend/app/services/ai.py",
      "to": "json",
      "kind": "call"
    },
    {
      "from": "backend/app/services/ai.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/services/ai.py",
      "to": "config",
      "kind": "call"
    },
    {
      "from": "backend/app/services/pdf.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/services/pdf.py",
      "to": "config",
      "kind": "call"
    },
    {
      "from": "backend/app/services/slides.py",
      "to": "typing",
      "kind": "call"
    },
    {
      "from": "backend/app/services/slides.py",
      "to": "config",
      "kind": "call"
    }
  ],
  "data": {
    "inputs": [
      {
        "path": "backend/app/routers/deck.py",
        "why": "Handles incoming requests related to deck operations."
      },
      {
        "path": "backend/app/routers/prospect.py",
        "why": "Handles incoming requests related to prospect operations."
      },
      {
        "path": "backend/app/routers/email.py",
        "why": "Handles incoming requests related to email operations."
      }
    ],
    "stores": [
      {
        "path": "backend/app/database.py",
        "why": "Defines the database connection and ORM setup for data storage."
      },
      {
        "path": "backend/app/models/prospect.py",
        "why": "Defines the data model for prospects, representing stored data structure."
      },
      {
        "path": "backend/app/models/deck.py",
        "why": "Defines the data model for decks, representing stored data structure."
      },
      {
        "path": "backend/app/models/email.py",
        "why": "Defines the data model for emails, representing stored data structure."
      }
    ],
    "externals": [
      {
        "path": "fastapi",
        "why": "Framework used for building the web application."
      },
      {
        "path": "sqlalchemy.orm",
        "why": "ORM library used for database interactions."
      },
      {
        "path": "pydantic",
        "why": "Library used for data validation and settings management."
      },
      {
        "path": "services.ai",
        "why": "External service for AI-related functionalities."
      },
      {
        "path": "services.pdf",
        "why": "External service for PDF generation functionalities."
      },
      {
        "path": "services.slides",
        "why": "External service for slide generation functionalities."
      }
    ]
  },
  "entrypoints": [
    "backend/app/routers/deck.py"
  ],
  "entryPoints": [
    "backend/app/routers/deck.py"
  ],
  "swimlanes": {
    "web": [],
    "api": [
      "backend/app/__init__.py",
      "backend/app/config.py",
      "backend/app/database.py",
      "backend/app/main.py",
      "backend/app/models/__init__.py",
      "backend/app/models/deck.py",
      "backend/app/models/email.py",
      "backend/app/models/prospect.py",
      "backend/app/routers/__init__.py",
      "backend/app/routers/deck.py",
      "backend/app/routers/email.py",
      "backend/app/routers/prospect.py",
      "backend/app/schemas/__init__.py",
      "backend/app/schemas/deck.py",
      "backend/app/schemas/email.py",
      "backend/app/schemas/prospect.py",
      "backend/app/services/__init__.py",
      "backend/app/services/ai.py",
      "backend/app/services/emailgeneration.py",
      "backend/app/services/pdf.py",
      "backend/app/services/slides.py",
      "backend/app/services/utils.py",
      "backend/app/templates/deck.html",
      "backend/migrate_add_phone.py",
      "backend/requirements.txt",
      "backend/static/init"
    ],
    "workers": [],
    "other": []
  },
  "control_flow": [],
  "data_flow": {
    "inputs": [],
    "stores": [],
    "externals": []
  },
  "policies": [
    {
      "path": "backend/app/config.py",
      "why": "Contains configuration settings that may include policy definitions.",
      "type": "unknown"
    }
  ],
  "contracts": [
    {
      "path": "backend/app/schemas/deck.py",
      "why": "Defines the schema for deck data, ensuring data integrity."
    },
    {
      "path": "backend/app/schemas/prospect.py",
      "why": "Defines the schema for prospect data, ensuring data integrity."
    },
    {
      "path": "backend/app/schemas/email.py",
      "why": "Defines the schema for email data, ensuring data integrity."
    }
  ],
  "summaries": {
    "file": {
      "backend/app/routers/deck.py": "",
      "json": "",
      "fastapi": "",
      "sqlalchemy.orm": "",
      "pydantic": "",
      "typing": "",
      "database": "",
      "models.prospect": "",
      "models.deck": "",
      "schemas.deck": "",
      "services.ai": "",
      "services.pdf": "",
      "services.slides": "",
      "config": "",
      "backend/app/services/emailgeneration.py": "",
      "backend/app/services/ai.py": "",
      "backend/app/main.py": "",
      "backend/app/routers/prospect.py": "",
      "backend/app/routers/email.py": "",
      "backend/app/database.py": "",
      "backend/app/models/prospect.py": "",
      "backend/app/models/deck.py": "",
      "backend/app/models/email.py": "",
      "backend/app/config.py": "",
      "backend/app/schemas/prospect.py": "",
      "backend/app/schemas/deck.py": "",
      "backend/app/schemas/email.py": "",
      "backend/app/services/pdf.py": "",
      "backend/app/services/slides.py": ""
    },
    "folder": {
      "backend/app": ""
    },
    "narrative": [
      {
        "label": "Initialize Application",
        "detail": "Start the FastAPI application by running the main.py file.",
        "scenario": "The application starts successfully without any errors."
      },
      {
        "label": "Send Request to Create Deck",
        "detail": "Send a POST request to the /deck endpoint with the required data to create a new deck.",
        "scenario": "The deck is created successfully, and a 201 Created response is returned."
      },
      {
        "label": "Retrieve Deck Information",
        "detail": "Send a GET request to the /deck/{deck_id} endpoint to retrieve the created deck's information.",
        "scenario": "The deck information is returned successfully with a 200 OK response."
      },
      {
        "label": "Update Deck Information",
        "detail": "Send a PUT request to the /deck/{deck_id} endpoint with updated data for the deck.",
        "scenario": "The deck is updated successfully, and a 200 OK response is returned."
      },
      {
        "label": "Generate PDF for Deck",
        "detail": "Send a POST request to the /deck/{deck_id}/generate-pdf endpoint to generate a PDF for the deck.",
        "scenario": "The PDF is generated successfully, and a 200 OK response is returned with the PDF file."
      },
      {
        "label": "Delete Deck",
        "detail": "Send a DELETE request to the /deck/{deck_id} endpoint to delete the deck.",
        "scenario": "The deck is deleted successfully, and a 204 No Content response is returned."
      }
    ]
  },
  "keyFiles": [
    "backend/app/routers/deck.py",
    "config",
    "database",
    "pydantic",
    "sqlalchemy.orm",
    "typing"
  ],
  "steps": [
    {
      "title": "Initialize Application",
      "description": "Start the FastAPI application by running the main.py file.",
      "fileId": "backend/app/routers/deck.py"
    },
    {
      "title": "Send Request to Create Deck",
      "description": "Send a POST request to the /deck endpoint with the required data to create a new deck.",
      "fileId": null
    },
    {
      "title": "Retrieve Deck Information",
      "description": "Send a GET request to the /deck/{deck_id} endpoint to retrieve the created deck's information.",
      "fileId": null
    },
    {
      "title": "Update Deck Information",
      "description": "Send a PUT request to the /deck/{deck_id} endpoint with updated data for the deck.",
      "fileId": null
    },
    {
      "title": "Generate PDF for Deck",
      "description": "Send a POST request to the /deck/{deck_id}/generate-pdf endpoint to generate a PDF for the deck.",
      "fileId": null
    },
    {
      "title": "Delete Deck",
      "description": "Send a DELETE request to the /deck/{deck_id} endpoint to delete the deck.",
      "fileId": null
    }
  ],
  "dataIn": [],
  "dataOut": [],
  "orchestrators": [],
  "sources": [
    "backend/app/routers/deck.py"
  ],
  "sinks": [],
  "controlFlow": [],
  "dataFlow": {
    "inputs": [],
    "stores": [],
    "externals": []
  },
  "nodeIndex": {
    "backend/app/services/__init__.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/services/pdf.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/routers/__init__.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/routers/email.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/routers/deck.py": {
      "role": "entrypoint",
      "lane": "web"
    },
    "backend/app/routers/prospect.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/models/prospect.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/schemas/__init__.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/main.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/services/slides.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/services/emailgeneration.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/models/deck.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/models/__init__.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/schemas/deck.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/database.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/__init__.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/config.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/requirements.txt": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/schemas/email.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/templates/deck.html": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/migrate_add_phone.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/services/ai.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/static/init": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/models/email.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/services/utils.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    },
    "backend/app/schemas/prospect.py": {
      "lane": "api",
      "role": "sink",
      "incoming": [],
      "outgoing": [],
      "policies": [],
      "envs": [],
      "relatedData": []
    }
  },
  "suspectRank": [],
  "recentChanges": []
}