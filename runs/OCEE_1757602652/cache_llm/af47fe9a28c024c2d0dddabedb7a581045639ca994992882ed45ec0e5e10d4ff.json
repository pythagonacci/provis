{
  "_raw": "{\n  \"glossary\": {\n    \"API\": {\n      \"definition\": \"An API (Application Programming Interface) is a set of rules that allows different software applications to communicate with each other.\",\n      \"vibecoder\": \"Think of an API as a restaurant menu; it lists the dishes you can order, and the kitchen (the server) prepares them for you.\"\n    },\n    \"module\": {\n      \"definition\": \"A module is a self-contained piece of code that can be reused across different parts of a program.\",\n      \"vibecoder\": \"Imagine a module as a Lego block; you can snap it together with other blocks to build something bigger.\"\n    },\n    \"service\": {\n      \"definition\": \"A service is a function or a set of functions that perform a specific task, often running in the background.\",\n      \"vibecoder\": \"Think of a service as a helpful waiter in a restaurant, taking care of specific tasks so you can enjoy your meal.\"\n    },\n    \"queue\": {\n      \"definition\": \"A queue is a data structure that stores items in a first-in, first-out (FIFO) order.\",\n      \"vibecoder\": \"Picture a line of people waiting for a concert; the first person in line gets in first, just like items in a queue.\"\n    },\n    \"state\": {\n      \"definition\": \"State refers to the current condition or status of an application at a specific point in time.\",\n      \"vibecoder\": \"Think of state as the mood of a party; it can change based on the music, the guests, and the vibe.\"\n    },\n    \"provider\": {\n      \"definition\": \"A provider is a component that supplies data or services to other parts of an application.\",\n      \"vibecoder\": \"Imagine a provider as a fountain, continuously supplying water (data) to thirsty plants (components) around it.\"\n    },\n    \"test\": {\n      \"definition\": \"A test is a procedure to check if a piece of code behaves as expected.\",\n      \"vibecoder\": \"Think of a test as a dress rehearsal for a play; it ensures everything runs smoothly before the big performance.\"\n    },\n    \"props\": {\n      \"definition\": \"Props (short for properties) are inputs passed to components in a framework like React, allowing data to flow between them.\",\n      \"vibecoder\": \"Imagine props as gifts you give to friends; they help enhance the experience of the gathering (component).\"\n    },\n    \"dependency\": {\n      \"definition\": \"A dependency is a piece of software that another piece of software relies on to function properly.\",\n      \"vibecoder\": \"Think of a dependency as a crutch; it supports you when you need help walking (functioning).\"\n    },\n    \"job\": {\n      \"definition\": \"A job is a specific task or unit of work that needs to be completed, often in the context of background processing.\",\n      \"vibecoder\": \"Imagine a job as a task on a to-do list; it needs to be checked off once completed.\"\n    },\n    \"logger\": {\n      \"definition\": \"A logger is a tool that records events or messages during the execution of a program for debugging or monitoring.\",\n      \"vibecoder\": \"Think of a logger as a diary; it keeps track of important moments and thoughts throughout your day (program).\"\n    },\n    \"schema\": {\n      \"definition\": \"A schema is a blueprint that defines the structure and organization of data in a database.\",\n      \"vibecoder\": \"Imagine a schema as the architectural plan for a house; it outlines where everything should go.\"\n    },\n    \"action\": {\n      \"definition\": \"An action is an event that triggers a change in the state of an application, often in response to user input.\",\n      \"vib"
}