{
  "_raw": "{\n  \"glossary\": {\n    \"provider\": {\n      \"definition\": \"A provider is a component that supplies data or functionality to other parts of an application.\",\n      \"vibecoder\": \"Think of a provider as a tree that offers shade and fruit to the branches around it.\"\n    },\n    \"middleware\": {\n      \"definition\": \"Middleware is software that acts as a bridge between different applications or services, processing data as it moves between them.\",\n      \"vibecoder\": \"Imagine middleware as a traffic cop directing cars at an intersection, ensuring smooth flow between roads.\"\n    },\n    \"logger\": {\n      \"definition\": \"A logger is a tool that records events or messages from an application, helping developers track its behavior.\",\n      \"vibecoder\": \"Picture a logger as a diary that captures the daily happenings of a busy life.\"\n    },\n    \"route\": {\n      \"definition\": \"A route defines a specific path in an application that responds to user requests.\",\n      \"vibecoder\": \"Think of a route as a map guiding travelers to their desired destinations.\"\n    },\n    \"service\": {\n      \"definition\": \"A service is a function or a set of functions that perform specific tasks, often reusable across an application.\",\n      \"vibecoder\": \"Imagine a service as a helpful robot that can perform various chores on command.\"\n    },\n    \"test\": {\n      \"definition\": \"A test is a procedure to verify that a piece of code behaves as expected.\",\n      \"vibecoder\": \"Consider a test as a safety net, ensuring that a tightrope walker can cross without falling.\"\n    },\n    \"props\": {\n      \"definition\": \"Props are short for properties, which are inputs passed to components in a framework like React.\",\n      \"vibecoder\": \"Think of props as ingredients that a chef uses to create a delicious dish.\"\n    },\n    \"component\": {\n      \"definition\": \"A component is a self-contained piece of code that represents a part of the user interface.\",\n      \"vibecoder\": \"Imagine a component as a building block in a Lego set, each with its unique shape and purpose.\"\n    },\n    \"queue\": {\n      \"definition\": \"A queue is a data structure that holds items in a specific order, typically for processing one at a time.\",\n      \"vibecoder\": \"Think of a queue as a line of people waiting for their turn at a concert entrance.\"\n    },\n    \"API\": {\n      \"definition\": \"An API (Application Programming Interface) is a set of rules that allows different software applications to communicate with each other.\",\n      \"vibecoder\": \"Picture an API as a waiter taking orders from customers and delivering food from the kitchen.\"\n    },\n    \"configuration\": {\n      \"definition\": \"Configuration refers to the settings and parameters that define how an application operates.\",\n      \"vibecoder\": \"Think of configuration as the dials and switches on a radio, tuning it to the desired station.\"\n    },\n    \"module\": {\n      \"definition\": \"A module is a self-contained unit of code that can be reused across different parts of an application.\",\n      \"vibecoder\": \"Imagine a module as a puzzle piece that fits into a larger picture.\"\n    },\n    \"action\": {\n      \"definition\": \"An action is an event or command that triggers a change in the application state.\",\n      \"vibecoder\": \"Think of an action as a spark that ignites a fire, setting off a chain reaction.\"\n    },\n    \"database model\": {\n      \"definition\": \"A database model defines the structure of data within a database, including how data is organized and accessed.\",\n      \"vibecoder\": \"Picture a database model as a blueprint for a house, outlining rooms and connections.\"\n    },\n    \"context\": {\n      \"definition\": \""
}