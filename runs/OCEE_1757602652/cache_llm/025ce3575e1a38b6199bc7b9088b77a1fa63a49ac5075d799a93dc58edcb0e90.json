{
  "_raw": "{\n  \"glossary\": {\n    \"action\": {\n      \"definition\": \"An action is an event or command that triggers a change in the application state.\",\n      \"vibecoder\": \"Think of an action as a spark that ignites a fire, setting off a chain reaction in your app.\"\n    },\n    \"logger\": {\n      \"definition\": \"A logger is a tool that records events or messages during the execution of a program.\",\n      \"vibecoder\": \"Imagine a logger as a diary for your app, capturing every important moment and thought.\"\n    },\n    \"service\": {\n      \"definition\": \"A service is a piece of code that performs a specific task, often running in the background.\",\n      \"vibecoder\": \"Picture a service as a diligent worker bee, buzzing around to complete tasks for the hive.\"\n    },\n    \"schema\": {\n      \"definition\": \"A schema is a blueprint that defines the structure of data in a database.\",\n      \"vibecoder\": \"Think of a schema as the architectural plan for a house, outlining where everything should go.\"\n    },\n    \"class\": {\n      \"definition\": \"A class is a blueprint for creating objects, defining their properties and behaviors.\",\n      \"vibecoder\": \"Imagine a class as a cookie cutter, shaping dough into specific forms with unique features.\"\n    },\n    \"controller\": {\n      \"definition\": \"A controller manages the flow of data between the model and the view in an application.\",\n      \"vibecoder\": \"Think of a controller as a traffic cop, directing the flow of information to keep everything running smoothly.\"\n    },\n    \"test\": {\n      \"definition\": \"A test is a procedure to verify that a piece of code behaves as expected.\",\n      \"vibecoder\": \"Picture a test as a safety net, ensuring that your tightrope walker (code) doesnâ€™t fall.\"\n    },\n    \"state\": {\n      \"definition\": \"State refers to the current condition or status of an application at a given time.\",\n      \"vibecoder\": \"Think of state as the mood of a person; it can change based on experiences and interactions.\"\n    },\n    \"selector\": {\n      \"definition\": \"A selector is a function that retrieves specific pieces of data from the application state.\",\n      \"vibecoder\": \"Imagine a selector as a librarian, fetching the exact book you need from a vast library.\"\n    },\n    \"dependency\": {\n      \"definition\": \"A dependency is a piece of code or library that another piece of code relies on to function.\",\n      \"vibecoder\": \"Think of a dependency as a crutch, supporting your code when it needs a little extra help.\"\n    },\n    \"component\": {\n      \"definition\": \"A component is a reusable piece of code that encapsulates a part of the user interface.\",\n      \"vibecoder\": \"Picture a component as a LEGO brick, fitting together with others to build a larger structure.\"\n    },\n    \"configuration\": {\n      \"definition\": \"Configuration refers to the settings that determine how an application behaves.\",\n      \"vibecoder\": \"Think of configuration as the recipe for a dish, specifying the ingredients and how to mix them.\"\n    },\n    \"context\": {\n      \"definition\": \"Context provides information about the environment in which a piece of code is executed.\",\n      \"vibecoder\": \"Imagine context as the atmosphere of a party, influencing how everyone interacts and behaves.\"\n    },\n    \"provider\": {\n      \"definition\": \"A provider is a component that supplies data or services to other parts of an application.\",\n      \"vibecoder\": \"Think of a provider as a fountain, continuously supplying water (data) to thirsty plants (components).\"\n    },\n    \"props\": {\n      \"definition\": \"Props are inputs passed to components, allowing them to"
}