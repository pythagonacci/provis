{
  "reads": [
    {
      "actorPath": "backend/app/routers/deck.py",
      "action": "read",
      "via": "models.deck",
      "reason": "The router accesses the deck model to handle requests related to deck operations."
    },
    {
      "actorPath": "backend/app/routers/deck.py",
      "action": "read",
      "via": "schemas.deck",
      "reason": "The router uses the deck schema for request validation and response serialization."
    },
    {
      "actorPath": "backend/app/routers/deck.py",
      "action": "read",
      "via": "models.prospect",
      "reason": "The router may need to access prospect data in relation to deck operations."
    },
    {
      "actorPath": "backend/app/models/deck.py",
      "action": "read",
      "via": "sqlalchemy.orm",
      "reason": "The model uses SQLAlchemy ORM to interact with the database."
    },
    {
      "actorPath": "backend/app/models/deck.py",
      "action": "read",
      "via": "database",
      "reason": "The model interacts with the database for data retrieval."
    }
  ],
  "writes": [
    {
      "actorPath": "backend/app/models/deck.py",
      "action": "write",
      "via": "sqlalchemy.orm",
      "reason": "The model uses SQLAlchemy ORM to persist changes to the database."
    },
    {
      "actorPath": "backend/app/models/deck.py",
      "action": "write",
      "via": "database",
      "reason": "The model interacts with the database to save updates or new deck entries."
    }
  ]
}