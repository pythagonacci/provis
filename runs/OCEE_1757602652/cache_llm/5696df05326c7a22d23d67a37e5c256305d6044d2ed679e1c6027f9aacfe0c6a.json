{
  "_raw": "{\n  \"glossary\": {\n    \"props\": {\n      \"definition\": \"Props are short for properties; they are inputs to a component that allow data to be passed down from parent to child components.\",\n      \"vibecoder\": \"Think of props as the ingredients you hand to a chef (component) to create a dish (output).\"\n    },\n    \"context\": {\n      \"definition\": \"Context provides a way to share values between components without having to pass props manually at every level.\",\n      \"vibecoder\": \"Imagine context as a shared library where everyone can borrow books (data) without needing to ask each other.\"\n    },\n    \"state\": {\n      \"definition\": \"State is a built-in object that holds data that may change over the lifetime of a component.\",\n      \"vibecoder\": \"Picture state as a garden where you can plant seeds (data) that grow and change over time.\"\n    },\n    \"dependency\": {\n      \"definition\": \"A dependency is a piece of code or library that a program relies on to function correctly.\",\n      \"vibecoder\": \"Think of dependencies as the supporting cast in a movie; without them, the main actor (your code) can't shine.\"\n    },\n    \"configuration\": {\n      \"definition\": \"Configuration refers to settings that determine how a program or system operates.\",\n      \"vibecoder\": \"Imagine configuration as the blueprint for a house, outlining where everything should go.\"\n    },\n    \"logger\": {\n      \"definition\": \"A logger is a tool that records events or messages during the execution of a program for debugging purposes.\",\n      \"vibecoder\": \"Think of a logger as a diary that keeps track of your daily adventures (program events).\"\n    },\n    \"service\": {\n      \"definition\": \"A service is a function or set of functions that perform a specific task, often used to handle business logic.\",\n      \"vibecoder\": \"Picture a service as a specialized worker in a factory, dedicated to completing a specific job efficiently.\"\n    },\n    \"middleware\": {\n      \"definition\": \"Middleware is software that acts as a bridge between different applications or services, processing requests and responses.\",\n      \"vibecoder\": \"Imagine middleware as a translator at a conference, ensuring smooth communication between different languages (systems).\"\n    },\n    \"action\": {\n      \"definition\": \"An action is an object that represents an event or a change that should happen in the application state.\",\n      \"vibecoder\": \"Think of an action as a letter sent to a post office, requesting a specific change in the neighborhood (state).\"\n    },\n    \"provider\": {\n      \"definition\": \"A provider is a component that supplies data or services to other components in a React application.\",\n      \"vibecoder\": \"Imagine a provider as a water fountain, offering refreshing water (data) to thirsty travelers (components).\"\n    },\n    \"route\": {\n      \"definition\": \"A route defines a path in a web application that maps a URL to a specific component or page.\",\n      \"vibecoder\": \"Think of a route as a road sign directing you to different destinations (components) on your journey (web app).\"\n    },\n    \"controller\": {\n      \"definition\": \"A controller is a component that handles user input and interacts with the model to update the view.\",\n      \"vibecoder\": \"Picture a controller as a conductor of an orchestra, guiding musicians (components) to create a harmonious performance (output).\"\n    },\n    \"component\": {\n      \"definition\": \"A component is a reusable piece of code that represents a part of the user interface in a web application.\",\n      \"vibecoder\": \"Think of a component as a LEGO brick, each one unique but fitting together to build a larger structure (UI).\"\n    },\n    \"test"
}