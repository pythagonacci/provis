{
  "reads": [
    {
      "actorPath": "backend/app/routers/deck.py",
      "action": "read",
      "via": "models.deck",
      "reason": "The router accesses the deck model to handle requests related to deck operations."
    },
    {
      "actorPath": "backend/app/routers/prospect.py",
      "action": "read",
      "via": "models.prospect",
      "reason": "The router accesses the prospect model to handle requests related to prospect operations."
    },
    {
      "actorPath": "backend/app/schemas/deck.py",
      "action": "read",
      "via": "schemas.deck",
      "reason": "The schema is used to validate and serialize data related to deck operations."
    },
    {
      "actorPath": "backend/app/services/ai.py",
      "action": "read",
      "via": "models.deck",
      "reason": "The service may utilize the deck model for AI-related operations."
    },
    {
      "actorPath": "backend/app/services/pdf.py",
      "action": "read",
      "via": "models.deck",
      "reason": "The service may generate PDFs that include information from the deck model."
    },
    {
      "actorPath": "backend/app/services/slides.py",
      "action": "read",
      "via": "models.deck",
      "reason": "The service may create slides based on the deck model data."
    }
  ],
  "writes": [
    {
      "actorPath": "backend/app/models/deck.py",
      "action": "write",
      "via": "sqlalchemy.orm",
      "reason": "The model interacts with the ORM to persist changes to the database."
    },
    {
      "actorPath": "backend/app/database.py",
      "action": "write",
      "via": "sqlalchemy.orm",
      "reason": "Database operations may involve writing data related to the deck model."
    }
  ]
}