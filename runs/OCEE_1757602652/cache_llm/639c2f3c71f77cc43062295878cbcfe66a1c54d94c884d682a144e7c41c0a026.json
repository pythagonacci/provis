{
  "_raw": "{\n  \"glossary\": {\n    \"module\": {\n      \"definition\": \"A module is a self-contained piece of code that encapsulates functionality and can be reused across different parts of a program.\",\n      \"vibecoder\": \"Think of a module as a Lego block; it can be snapped together with others to build something bigger.\"\n    },\n    \"reducer\": {\n      \"definition\": \"A reducer is a function that takes the current state and an action, and returns a new state.\",\n      \"vibecoder\": \"Imagine a chef adjusting a recipe based on feedback; the reducer tweaks the dish (state) with each new ingredient (action).\"\n    },\n    \"class\": {\n      \"definition\": \"A class is a blueprint for creating objects, defining properties and methods that those objects will have.\",\n      \"vibecoder\": \"Picture a class as a mold for a cookie; it shapes the dough (object) into a specific form.\"\n    },\n    \"logger\": {\n      \"definition\": \"A logger is a tool that records events or messages during the execution of a program for debugging or monitoring.\",\n      \"vibecoder\": \"Think of a logger as a diary; it keeps track of everything that happens in your coding journey.\"\n    },\n    \"dependency\": {\n      \"definition\": \"A dependency is a piece of software or library that a program needs to function properly.\",\n      \"vibecoder\": \"Imagine a tree relying on its roots; dependencies nourish your code, helping it grow and thrive.\"\n    },\n    \"service\": {\n      \"definition\": \"A service is a function or set of functions that perform a specific task, often running in the background.\",\n      \"vibecoder\": \"Think of a service as a waiter in a restaurant, taking orders and delivering food without you needing to worry about the kitchen.\"\n    },\n    \"queue\": {\n      \"definition\": \"A queue is a data structure that stores items in a first-in, first-out (FIFO) order.\",\n      \"vibecoder\": \"Picture a line of people waiting for a concert; the first person in line gets in first, just like items in a queue.\"\n    },\n    \"database model\": {\n      \"definition\": \"A database model defines how data is structured and accessed in a database.\",\n      \"vibecoder\": \"Think of a database model as the blueprint of a library, organizing books so you can find what you need easily.\"\n    },\n    \"context\": {\n      \"definition\": \"Context refers to the environment or situation in which a piece of code operates, often providing necessary information.\",\n      \"vibecoder\": \"Imagine context as the atmosphere of a party; it sets the mood and influences how everyone interacts.\"\n    },\n    \"action\": {\n      \"definition\": \"An action is an event or command that triggers a change in the state of an application.\",\n      \"vibecoder\": \"Think of an action as a spark; it ignites a reaction that changes the landscape of your code.\"\n    },\n    \"state\": {\n      \"definition\": \"State is the current condition or data of an application at a specific point in time.\",\n      \"vibecoder\": \"Picture state as a snapshot of a moment; it captures everything happening in your application right then.\"\n    },\n    \"API\": {\n      \"definition\": \"An API (Application Programming Interface) is a set of rules that allows different software applications to communicate with each other.\",\n      \"vibecoder\": \"Think of an API as a restaurant menu; it lists what you can order and how to interact with the kitchen (software).\"\n    },\n    \"import\": {\n      \"definition\": \"Importing is the process of bringing in code or modules from other files or libraries into your current file.\",\n      \"vibecoder\": \"Imagine importing as borrowing a book from a library"
}