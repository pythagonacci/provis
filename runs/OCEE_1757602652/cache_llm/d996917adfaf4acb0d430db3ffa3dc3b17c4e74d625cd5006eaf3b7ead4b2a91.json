{
  "inputs": [
    {
      "path": "backend/app/routers/email.py",
      "why": "Handles incoming email requests."
    },
    {
      "path": "backend/app/routers/prospect.py",
      "why": "Handles incoming prospect requests."
    },
    {
      "path": "backend/app/routers/deck.py",
      "why": "Handles incoming deck requests."
    }
  ],
  "stores": [
    {
      "path": "backend/app/database.py",
      "why": "Defines the database connection and ORM setup."
    },
    {
      "path": "backend/app/models/email.py",
      "why": "Defines the Email model for database storage."
    },
    {
      "path": "backend/app/models/prospect.py",
      "why": "Defines the Prospect model for database storage."
    },
    {
      "path": "backend/app/models/deck.py",
      "why": "Defines the Deck model for database storage."
    }
  ],
  "externals": [
    {
      "path": "fastapi",
      "why": "Framework used for building the web application."
    },
    {
      "path": "sqlalchemy.orm",
      "why": "Used for ORM functionality with the database."
    },
    {
      "path": "pydantic",
      "why": "Used for data validation and settings management."
    }
  ],
  "contracts": [
    {
      "path": "backend/app/schemas/email.py",
      "why": "Defines the schema for email data validation."
    },
    {
      "path": "backend/app/schemas/prospect.py",
      "why": "Defines the schema for prospect data validation."
    },
    {
      "path": "backend/app/schemas/deck.py",
      "why": "Defines the schema for deck data validation."
    }
  ],
  "policies": [
    {
      "path": "backend/app/services/emailgeneration.py",
      "why": "Contains business logic for email generation policies."
    },
    {
      "path": "backend/app/services/slides.py",
      "why": "Contains business logic for slide generation policies."
    },
    {
      "path": "backend/app/services/pdf.py",
      "why": "Contains business logic for PDF generation policies."
    }
  ]
}