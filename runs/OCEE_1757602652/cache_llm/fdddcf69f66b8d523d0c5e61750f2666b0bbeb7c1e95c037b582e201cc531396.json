{
  "_raw": "{\n  \"glossary\": {\n    \"selector\": {\n      \"definition\": \"A selector is a function that extracts specific data from a state object in a program.\",\n      \"vibecoder\": \"Think of a selector as a chef picking the freshest ingredients from a garden to create a delicious dish.\"\n    },\n    \"job\": {\n      \"definition\": \"A job refers to a specific task or unit of work that a program or system needs to perform.\",\n      \"vibecoder\": \"Imagine a job as a delivery driver picking up packages and dropping them off at various locations.\"\n    },\n    \"function\": {\n      \"definition\": \"A function is a reusable block of code that performs a specific task when called.\",\n      \"vibecoder\": \"Consider a function as a magic spell that transforms ingredients into a cake when you say the right words.\"\n    },\n    \"database model\": {\n      \"definition\": \"A database model defines how data is structured, stored, and accessed in a database.\",\n      \"vibecoder\": \"Think of a database model as the blueprint of a house, outlining where each room and feature will be placed.\"\n    },\n    \"route\": {\n      \"definition\": \"A route is a defined path in a web application that maps a URL to a specific function or resource.\",\n      \"vibecoder\": \"Imagine a route as a road sign guiding travelers to their desired destination in a city.\"\n    },\n    \"class\": {\n      \"definition\": \"A class is a blueprint for creating objects, encapsulating data and behavior in object-oriented programming.\",\n      \"vibecoder\": \"Think of a class as a cookie cutter, shaping dough into various cookie forms with specific characteristics.\"\n    },\n    \"configuration\": {\n      \"definition\": \"Configuration refers to the settings and parameters that define how a program or system operates.\",\n      \"vibecoder\": \"Imagine configuration as the dials and knobs on a radio, tuning it to the right frequency for clear sound.\"\n    },\n    \"dependency\": {\n      \"definition\": \"A dependency is a piece of software or library that a program requires to function properly.\",\n      \"vibecoder\": \"Think of a dependency as a teammate in a relay race, passing the baton to ensure the race continues smoothly.\"\n    },\n    \"export\": {\n      \"definition\": \"Export is the process of making a piece of code available for use in other parts of a program or in different programs.\",\n      \"vibecoder\": \"Imagine export as sending a postcard from your vacation, sharing your experiences with friends back home.\"\n    },\n    \"queue\": {\n      \"definition\": \"A queue is a data structure that stores items in a first-in, first-out (FIFO) order.\",\n      \"vibecoder\": \"Think of a queue as a line at a coffee shop, where customers are served in the order they arrived.\"\n    },\n    \"hook\": {\n      \"definition\": \"A hook is a function that allows you to tap into a program's lifecycle or events to add custom behavior.\",\n      \"vibecoder\": \"Imagine a hook as a fishing line, casting out to catch specific moments in the flow of a river.\"\n    },\n    \"state\": {\n      \"definition\": \"State refers to the current condition or data of an application at a specific point in time.\",\n      \"vibecoder\": \"Think of state as the mood of a party, changing based on the music, guests, and atmosphere.\"\n    },\n    \"component\": {\n      \"definition\": \"A component is a self-contained piece of code that represents a part of a user interface.\",\n      \"vibecoder\": \"Imagine a component as a building block in a Lego set, each piece contributing to the overall structure.\"\n    },\n    \"props\": {\n      \"definition\": \"Props are short for properties, which are inputs passed to components to"
}