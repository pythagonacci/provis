{
  "repoId": "OCEE_1757602652",
  "generatedAt": "2025-09-11T17:39:50.610691+00:00",
  "summary": {
    "totalFiles": 42,
    "languages": {
      "other": 11,
      "py": 23,
      "js": 2,
      "ts": 6
    }
  },
  "files": [
    {
      "path": "README.md",
      "language": "other",
      "ext": "",
      "size": 1199,
      "lines": 10,
      "hash": "4fb4ce5fd3165d7f1c7f3f349d2ce4de1e1993c4e6e41a6d6da485931d844b33",
      "mtime": 1757602652.9935205,
      "imports": [],
      "exports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed"
    },
    {
      "path": ".gitignore",
      "language": "other",
      "ext": "",
      "size": 13,
      "lines": 1,
      "hash": "5573b9168caf19028ac7eedcf943999f8d923266ec0c26404ef8f5e566353340",
      "mtime": 1757602652.9937208,
      "imports": [],
      "exports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed"
    },
    {
      "path": "backend/requirements.txt",
      "language": "other",
      "ext": "",
      "size": 111,
      "lines": 10,
      "hash": "5fb86cbc65f9248cb8b5349472eb8db57e28abb8b1502f12f65cd9071124dfa8",
      "mtime": 1757602652.9920504,
      "imports": [],
      "exports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed"
    },
    {
      "path": "backend/migrate_add_phone.py",
      "language": "py",
      "ext": "",
      "size": 1080,
      "lines": 37,
      "hash": "ec20a7e980071d7ba9e346feb08dab099b26591fc0225be97315208c020bcbe3",
      "mtime": 1757602652.9932597,
      "imports": [
        {
          "raw": "sqlite3",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "os",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [
        {
          "name": "migrate",
          "params": [],
          "decorators": [],
          "calls": [
            "close",
            "commit",
            "rollback",
            "connect",
            "print",
            "cursor",
            "execute",
            "fetchall",
            "exists"
          ],
          "sideEffects": [
            "io"
          ]
        }
      ],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this script as a bridge that helps your database evolve by adding new features, like a phone number field, without losing any of its existing treasures.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Migration Script for Adding Phone Field",
        "purpose": "This script is designed to handle database migrations, specifically adding a phone number field to an existing database schema.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "sqlite3",
          "os"
        ],
        "how_to_modify": "To modify this script, you can add new migration steps or adjust existing ones. Ensure that any changes to the database schema are reflected in the migration logic.",
        "risks": "Modifying the migration logic without proper testing may lead to data loss or corruption. Always back up your database before running migrations.",
        "blurb": "Think of this script as a bridge that helps your database evolve by adding new features, like a phone number field, without losing any of its existing treasures.",
        "dev_summary": "This script facilitates database migrations using SQLite. It currently lacks defined functions or classes, indicating it may be a simple script. Be cautious with schema changes.",
        "vibecoder_summary": "Imagine your database is a garden, and this script is a gardener adding new plants (phone fields) to make it more beautiful. Just be careful not to pull out any of the old plants while you're at it!",
        "edit_points": []
      }
    },
    {
      "path": "backend/app/config.py",
      "language": "py",
      "ext": "",
      "size": 1576,
      "lines": 55,
      "hash": "cbb864dc6dcee04167cf7e0f997b612c417bdbd74dbbc84b6551b179a286c9ad",
      "mtime": 1757602652.97321,
      "imports": [
        {
          "raw": "__future__",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "pydantic_settings",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "pydantic",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [],
      "classes": [
        {
          "name": "Settings",
          "methods": [
            "_normalize_storage_dir",
            "_normalize_base_url",
            "_normalize_origins"
          ],
          "baseClasses": [
            "BaseSettings"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the blueprint for your app's settings, ensuring everything is in the right place and correctly labeled.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Configuration Management",
        "purpose": "This file manages application configuration settings using Pydantic for validation and type checking.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "__future__",
          "typing",
          "pydantic_settings",
          "pydantic"
        ],
        "how_to_modify": "To modify configuration settings, update the relevant Pydantic model definitions or add new settings as needed. Ensure that any new settings are validated appropriately.",
        "risks": "Improper modifications may lead to invalid configurations, causing runtime errors or unexpected behavior in the application. Always validate changes against the expected data types and constraints.",
        "blurb": "Think of this file as the blueprint for your app's settings, ensuring everything is in the right place and correctly labeled.",
        "dev_summary": "Handles application configuration using Pydantic for type safety. No functions or classes are defined here, but it serves as a foundational setup for configuration management.",
        "vibecoder_summary": "Imagine this file as the recipe book for your app, listing all the ingredients (settings) needed to cook up a delicious experience. If you change an ingredient, make sure it still tastes good!",
        "edit_points": []
      }
    },
    {
      "path": "backend/app/database.py",
      "language": "py",
      "ext": "",
      "size": 504,
      "lines": 19,
      "hash": "494ec199f75fda59a9ec46565b224649487aa7a6420dbf430e8852c06e3232e2",
      "mtime": 1757602652.9734,
      "imports": [
        {
          "raw": "sqlalchemy",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "sqlalchemy.ext.declarative",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "sqlalchemy.orm",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "config",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [
        {
          "name": "get_db",
          "params": [],
          "decorators": [],
          "calls": [
            "close",
            "SessionLocal"
          ],
          "sideEffects": [
            "db"
          ]
        }
      ],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "This is your gateway to the database! Here, you can define how your data is structured and how your application interacts with it.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Database Module",
        "purpose": "This module is responsible for setting up the database connection and defining the data models using SQLAlchemy.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "sqlalchemy",
          "sqlalchemy.ext.declarative",
          "sqlalchemy.orm",
          "config"
        ],
        "how_to_modify": "To modify this file, you can add new database models or change the database connection settings. Ensure that any new models are properly defined according to SQLAlchemy's ORM standards.",
        "risks": "Modifying the database connection settings may lead to connection issues. Adding or changing models without proper migration can result in data loss or corruption.",
        "blurb": "This is your gateway to the database! Here, you can define how your data is structured and how your application interacts with it.",
        "dev_summary": "Sets up SQLAlchemy ORM for database interactions. No functions or classes defined yet. Be cautious with model changes and migrations.",
        "vibecoder_summary": "Think of this module as the architect of a library. It decides what books (data) go on which shelves (tables) and how to find them. Just be careful not to knock over the shelves while rearranging!",
        "edit_points": "Look for sections where you can define new classes for models or adjust the database connection settings. Ensure you follow SQLAlchemy conventions."
      }
    },
    {
      "path": "backend/app/__init__.py",
      "language": "py",
      "ext": "",
      "size": 0,
      "lines": 0,
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "mtime": 1757602652.9735327,
      "imports": [],
      "exports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the welcome mat for your application. It sets the stage for everything that happens in the backend!",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "__init__.py in backend/app",
        "purpose": "This file serves as an initializer for the backend application, allowing Python to recognize the directory as a package.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [],
        "how_to_modify": "You can add initialization code or import statements for modules that should be available when the package is imported. Ensure that any added imports do not create circular dependencies.",
        "risks": "Modifying this file without understanding the package structure can lead to import errors or unexpected behavior in the application. Be cautious of adding dependencies that may not be available in the production environment.",
        "blurb": "Think of this file as the welcome mat for your application. It sets the stage for everything that happens in the backend!",
        "dev_summary": "This file initializes the backend application package. It currently has no defined functions or classes. Be careful when adding imports to avoid circular dependencies.",
        "vibecoder_summary": "Imagine this file as the front door of a cozy little caf\u00e9. It\u2019s where you set up the welcome sign and make sure everything inside is ready for customers. Just don\u2019t block the door with too much stuff or it\u2019ll be hard for people to get in!",
        "edit_points": []
      }
    },
    {
      "path": "backend/app/main.py",
      "language": "py",
      "ext": "",
      "size": 2035,
      "lines": 60,
      "hash": "4906adc1483052a7e44565e4f910c01a0377fa520f8b80e6a3624f95b48759e5",
      "mtime": 1757602652.9854941,
      "imports": [
        {
          "raw": "__future__",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "os",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "fastapi",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "fastapi.middleware.cors",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "fastapi.staticfiles",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "config",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "database",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "routers",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "routers",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "routers",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [
        {
          "name": "healthz",
          "params": [],
          "decorators": [
            "get"
          ],
          "calls": [
            "get"
          ],
          "sideEffects": [
            "io"
          ]
        }
      ],
      "classes": [],
      "routes": [
        {
          "method": "GET",
          "path": "/healthz",
          "handler": "healthz"
        }
      ],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": "fastapi",
        "isRoute": true,
        "isReactComponent": false,
        "isAPI": true
      },
      "warnings": [],
      "blurb": "This is the heart of your FastAPI application, where everything comes together to serve your API requests.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Main Application Entry Point",
        "purpose": "This file serves as the main entry point for a FastAPI application, configuring middleware, static files, and routing.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "__future__",
          "os",
          "fastapi",
          "fastapi.middleware.cors",
          "fastapi.staticfiles",
          "config",
          "database",
          "routers"
        ],
        "how_to_modify": "To modify this file, focus on configuring middleware, adding static file routes, or adjusting the routing logic. Ensure that any changes align with the FastAPI framework conventions.",
        "risks": "Improper modifications could lead to application crashes, routing errors, or security vulnerabilities. Always test changes in a development environment before deploying.",
        "blurb": "This is the heart of your FastAPI application, where everything comes together to serve your API requests.",
        "dev_summary": "Main entry point for FastAPI app. Configures CORS, static files, and routes. Ensure middleware and routing are correctly set up to avoid runtime issues.",
        "vibecoder_summary": "Imagine this file as the conductor of an orchestra, bringing together all the musicians (your routes and middleware) to create a beautiful symphony (your API). If the conductor misses a beat, the music can turn into chaos!",
        "edit_points": [
          "Middleware configuration",
          "Static file serving setup",
          "Routing adjustments"
        ]
      }
    },
    {
      "path": "backend/app/routers/prospect.py",
      "language": "py",
      "ext": "",
      "size": 2720,
      "lines": 70,
      "hash": "ca48a74a837a7df257f1fa1c1eef1a9673525bf9c90cddc7b17a8a3f5dea7fbb",
      "mtime": 1757602652.9685793,
      "imports": [
        {
          "raw": "fastapi",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "sqlalchemy.orm",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "database",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "schemas.prospect",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [
        {
          "name": "create_prospect",
          "params": [
            "payload",
            "db"
          ],
          "decorators": [
            "post"
          ],
          "calls": [
            "Depends",
            "strip",
            "str",
            "add",
            "refresh",
            "post",
            "Prospect",
            "commit"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "list_prospects",
          "params": [
            "db"
          ],
          "decorators": [
            "get"
          ],
          "calls": [
            "Depends",
            "desc",
            "query",
            "order_by",
            "get",
            "all"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "get_prospect",
          "params": [
            "prospect_id",
            "db"
          ],
          "decorators": [
            "get"
          ],
          "calls": [
            "get",
            "Depends",
            "query",
            "HTTPException"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "update_prospect",
          "params": [
            "prospect_id",
            "payload",
            "db"
          ],
          "decorators": [
            "patch"
          ],
          "calls": [
            "Depends",
            "query",
            "strip",
            "str",
            "patch",
            "get",
            "refresh",
            "HTTPException",
            "commit"
          ],
          "sideEffects": [
            "db"
          ]
        }
      ],
      "classes": [],
      "routes": [
        {
          "method": "POST",
          "path": "",
          "handler": "create_prospect"
        },
        {
          "method": "GET",
          "path": "",
          "handler": "list_prospects"
        },
        {
          "method": "GET",
          "path": "/{prospect_id}",
          "handler": "get_prospect"
        },
        {
          "method": "PATCH",
          "path": "/{prospect_id}",
          "handler": "update_prospect"
        }
      ],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": "fastapi",
        "isRoute": true,
        "isReactComponent": false,
        "isAPI": true
      },
      "warnings": [],
      "blurb": "The Prospect Router is like a traffic controller for your prospect data, guiding requests to the right handlers and ensuring smooth communication between the client and the database.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Prospect Router",
        "purpose": "This file defines the API routes related to prospects in the application, handling requests and responses for prospect data.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "fastapi",
          "sqlalchemy.orm",
          "typing",
          "database",
          "schemas.prospect"
        ],
        "how_to_modify": "To modify this file, add or update route definitions using FastAPI decorators. Ensure that any changes to the data models or schemas are reflected in the corresponding imports and logic.",
        "risks": "Modifying routes without proper validation can lead to broken API endpoints. Ensure that any changes are tested thoroughly to avoid runtime errors or data inconsistencies.",
        "blurb": "The Prospect Router is like a traffic controller for your prospect data, guiding requests to the right handlers and ensuring smooth communication between the client and the database.",
        "dev_summary": "Defines API routes for prospect management using FastAPI. Interfaces with SQLAlchemy for database operations. Ensure schemas are up-to-date with any changes.",
        "vibecoder_summary": "Imagine this file as a friendly post office, sorting and delivering messages about prospects. When you want to send or receive info about prospects, this is where the magic happens!",
        "edit_points": "Focus on adding new route handlers or modifying existing ones. Pay attention to the imports at the top to ensure all dependencies are correctly referenced."
      }
    },
    {
      "path": "backend/app/routers/deck.py",
      "language": "py",
      "ext": "",
      "size": 9584,
      "lines": 289,
      "hash": "1f61a967104d1026591bc5495054ef1813c6f26d4eec36f84ab92b80a14f5277",
      "mtime": 1757602652.9691331,
      "imports": [
        {
          "raw": "json",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "fastapi",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "sqlalchemy.orm",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "pydantic",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "database",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "models.prospect",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "models.deck",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "schemas.deck",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "services.ai",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "services.pdf",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "services.slides",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "config",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [
        {
          "name": "generate_deck",
          "params": [
            "prospect_id",
            "db"
          ],
          "decorators": [
            "post"
          ],
          "calls": [
            "Depends",
            "str",
            "add",
            "get",
            "refresh",
            "rstrip",
            "Deck",
            "post",
            "dumps",
            "HTTPException",
            "commit",
            "generate_deck_content"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "get_deck",
          "params": [
            "deck_id",
            "db"
          ],
          "decorators": [
            "get"
          ],
          "calls": [
            "Depends",
            "loads",
            "get",
            "rstrip",
            "HTTPException"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "update_deck",
          "params": [
            "deck_id",
            "payload",
            "db"
          ],
          "decorators": [
            "patch"
          ],
          "calls": [
            "Depends",
            "patch",
            "get",
            "add",
            "refresh",
            "rstrip",
            "dumps",
            "_truncate",
            "validate_and_normalize_slides",
            "HTTPException",
            "_strip_markup",
            "dict",
            "commit"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "render_deck",
          "params": [
            "deck_id",
            "db"
          ],
          "decorators": [
            "post"
          ],
          "calls": [
            "Depends",
            "loads",
            "render_deck_to_pdf",
            "str",
            "add",
            "get",
            "refresh",
            "rstrip",
            "post",
            "HTTPException",
            "commit"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "get_slide",
          "params": [
            "deck_id",
            "index",
            "db"
          ],
          "decorators": [
            "get"
          ],
          "calls": [
            "Depends",
            "loads",
            "len",
            "get",
            "HTTPException"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "patch_slide",
          "params": [
            "deck_id",
            "index",
            "patch",
            "db"
          ],
          "decorators": [
            "patch"
          ],
          "calls": [
            "update",
            "Depends",
            "loads",
            "len",
            "patch",
            "get",
            "add",
            "refresh",
            "rstrip",
            "dumps",
            "_truncate",
            "validate_and_normalize_slides",
            "HTTPException",
            "_strip_markup",
            "commit"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "ai_edit_slide",
          "params": [
            "deck_id",
            "index",
            "request",
            "db"
          ],
          "decorators": [
            "post"
          ],
          "calls": [
            "Depends",
            "loads",
            "len",
            "str",
            "add",
            "get",
            "refresh",
            "rstrip",
            "post",
            "dumps",
            "HTTPException",
            "commit",
            "edit_deck_slide_content"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "debug_ai_edit_test",
          "params": [
            "request",
            "db"
          ],
          "decorators": [
            "post"
          ],
          "calls": [
            "Depends",
            "str",
            "get",
            "type",
            "post",
            "edit_deck_slide_content"
          ],
          "sideEffects": [
            "db"
          ]
        }
      ],
      "classes": [
        {
          "name": "SlidePatch",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "SlideAIEditRequest",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        }
      ],
      "routes": [
        {
          "method": "POST",
          "path": "/{prospect_id}/generate",
          "handler": "generate_deck"
        },
        {
          "method": "GET",
          "path": "/{deck_id}",
          "handler": "get_deck"
        },
        {
          "method": "PATCH",
          "path": "/{deck_id}",
          "handler": "update_deck"
        },
        {
          "method": "POST",
          "path": "/{deck_id}/render",
          "handler": "render_deck"
        },
        {
          "method": "GET",
          "path": "/{deck_id}/slides/{index}",
          "handler": "get_slide"
        },
        {
          "method": "PATCH",
          "path": "/{deck_id}/slides/{index}",
          "handler": "patch_slide"
        },
        {
          "method": "POST",
          "path": "/{deck_id}/slides/{index}/ai-edit",
          "handler": "ai_edit_slide"
        },
        {
          "method": "POST",
          "path": "/debug/ai-edit-test",
          "handler": "debug_ai_edit_test"
        }
      ],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [
          "SlidePatch",
          "SlideAIEditRequest"
        ],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": "fastapi",
        "isRoute": true,
        "isReactComponent": false,
        "isAPI": true
      },
      "warnings": [],
      "blurb": "This file is like the traffic controller for deck-related requests, guiding data to and from the right places.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Deck Router",
        "purpose": "Handles API routes related to deck management in a FastAPI application.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "json",
          "fastapi",
          "sqlalchemy.orm",
          "pydantic",
          "typing",
          "database",
          "models.prospect",
          "models.deck",
          "schemas.deck",
          "services.ai"
        ],
        "how_to_modify": "To modify the deck routes, add new route functions or update existing ones within the FastAPI router. Ensure to follow the FastAPI conventions for defining endpoints and handling requests/responses.",
        "risks": "Modifying the routes may lead to broken API endpoints or incorrect data handling if not done carefully. Ensure to validate any changes against existing tests and API documentation.",
        "blurb": "This file is like the traffic controller for deck-related requests, guiding data to and from the right places.",
        "dev_summary": "Defines API routes for deck management using FastAPI. No functions or classes are defined directly in this file, but it interfaces with models and services for data handling. Ensure to maintain API consistency when adding or modifying routes.",
        "vibecoder_summary": "Imagine this file as a friendly librarian who knows exactly where to find all the deck-related books. If you want to add a new book or change the way they are organized, just make sure you don\u2019t misplace anything!",
        "edit_points": []
      }
    },
    {
      "path": "backend/app/routers/__init__.py",
      "language": "py",
      "ext": "",
      "size": 0,
      "lines": 0,
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "mtime": 1757602652.9692736,
      "imports": [],
      "exports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the map of a city, guiding users to their desired destinations. If you change the roads, make sure they still lead to the right places!",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Router Initialization Module",
        "purpose": "This module serves as the entry point for routing functionalities in the backend application, organizing and initializing routes for the application.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [],
        "how_to_modify": "You can add new route definitions or modify existing ones in this module. Ensure that any new routes are properly linked to their respective handlers.",
        "risks": "Modifying this file without understanding the routing structure may lead to broken links or inaccessible routes in the application. Always test routes after making changes.",
        "blurb": "Think of this file as the map of a city, guiding users to their desired destinations. If you change the roads, make sure they still lead to the right places!",
        "dev_summary": "This file initializes routing for the backend app. It currently has no defined functions or classes. Be cautious when adding routes to maintain application integrity.",
        "vibecoder_summary": "Imagine this file as the conductor of an orchestra, ensuring every musician (route) plays their part at the right time. If you want to add a new musician, make sure they know the score!",
        "edit_points": []
      }
    },
    {
      "path": "backend/app/routers/email.py",
      "language": "py",
      "ext": "",
      "size": 5227,
      "lines": 152,
      "hash": "b26f5efdc3fbe70cf60d68f40e46c58b6bb9a2ec797ca070023f1eae1c49884e",
      "mtime": 1757602652.972944,
      "imports": [
        {
          "raw": "__future__",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "fastapi",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "sqlalchemy.orm",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "pydantic",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "database",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "models.prospect",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "models.email",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "schemas.email",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "services.emailgeneration",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [
        {
          "name": "_to_out",
          "params": [
            "e"
          ],
          "decorators": [],
          "calls": [
            "EmailOut"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "generate_email_sequence",
          "params": [
            "prospect_id",
            "db"
          ],
          "decorators": [
            "post"
          ],
          "calls": [
            "Depends",
            "_to_out",
            "append",
            "query",
            "str",
            "Email",
            "get",
            "add",
            "refresh",
            "flush",
            "post",
            "filter",
            "delete",
            "HTTPException",
            "commit",
            "generate_emails",
            "EmailBatchOut"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "list_emails_for_prospect",
          "params": [
            "prospect_id",
            "db"
          ],
          "decorators": [
            "get"
          ],
          "calls": [
            "asc",
            "Depends",
            "_to_out",
            "query",
            "order_by",
            "get",
            "filter",
            "EmailBatchOut",
            "all"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "get_email",
          "params": [
            "email_id",
            "db"
          ],
          "decorators": [
            "get"
          ],
          "calls": [
            "get",
            "Depends",
            "_to_out",
            "HTTPException"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "update_email",
          "params": [
            "email_id",
            "payload",
            "db"
          ],
          "decorators": [
            "patch"
          ],
          "calls": [
            "Depends",
            "_to_out",
            "strip",
            "patch",
            "get",
            "add",
            "refresh",
            "HTTPException",
            "commit"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "delete_email",
          "params": [
            "email_id",
            "db"
          ],
          "decorators": [
            "delete"
          ],
          "calls": [
            "Depends",
            "get",
            "HTTPException",
            "delete",
            "commit"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "ai_edit_email",
          "params": [
            "email_id",
            "request",
            "db"
          ],
          "decorators": [
            "post"
          ],
          "calls": [
            "Depends",
            "_to_out",
            "str",
            "add",
            "get",
            "refresh",
            "post",
            "edit_email_content",
            "HTTPException",
            "commit"
          ],
          "sideEffects": [
            "db"
          ]
        }
      ],
      "classes": [
        {
          "name": "EmailAIEditRequest",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        }
      ],
      "routes": [
        {
          "method": "POST",
          "path": "/{prospect_id}/generate",
          "handler": "generate_email_sequence"
        },
        {
          "method": "GET",
          "path": "/{prospect_id}",
          "handler": "list_emails_for_prospect"
        },
        {
          "method": "GET",
          "path": "/item/{email_id}",
          "handler": "get_email"
        },
        {
          "method": "PATCH",
          "path": "/item/{email_id}",
          "handler": "update_email"
        },
        {
          "method": "DELETE",
          "path": "/item/{email_id}",
          "handler": "delete_email"
        },
        {
          "method": "POST",
          "path": "/item/{email_id}/ai-edit",
          "handler": "ai_edit_email"
        }
      ],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [
          "EmailAIEditRequest"
        ],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": "fastapi",
        "isRoute": true,
        "isReactComponent": false,
        "isAPI": true
      },
      "warnings": [],
      "blurb": "This file is the gateway for all things email in our application, ensuring that requests are routed correctly and handled with care.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Email Router",
        "purpose": "Handles email-related API routes for the application using FastAPI.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "__future__",
          "typing",
          "fastapi",
          "sqlalchemy.orm",
          "pydantic",
          "database",
          "models.prospect",
          "models.email",
          "schemas.email",
          "services.emailgeneration"
        ],
        "how_to_modify": "To modify the email routing logic, locate the relevant route definitions within this file. Ensure that any changes to the API endpoints are reflected in the corresponding service and schema files. Test the API endpoints thoroughly after making changes.",
        "risks": "Modifying the routing logic may introduce breaking changes to the API. Ensure that all dependencies are compatible with the changes made. Failing to validate input or output schemas can lead to runtime errors.",
        "blurb": "This file is the gateway for all things email in our application, ensuring that requests are routed correctly and handled with care.",
        "dev_summary": "Defines API routes for email operations in a FastAPI application. Interfaces with SQLAlchemy for database interactions and Pydantic for data validation. Be cautious of changes that may affect API contracts.",
        "vibecoder_summary": "Imagine this file as the post office of your application, sorting and delivering email requests to the right destinations. Tinker with it carefully, or you might send your messages to the wrong address!",
        "edit_points": "Look for route decorators (like @app.get or @app.post) to add or modify endpoints. Ensure to check related models and schemas for consistency."
      }
    },
    {
      "path": "backend/app/models/prospect.py",
      "language": "py",
      "ext": "",
      "size": 1132,
      "lines": 31,
      "hash": "176595ef5c6ac9b6af75b3606eec6f61328b2a5fe6af74fbe6dd8ac595f19532",
      "mtime": 1757602652.9740038,
      "imports": [
        {
          "raw": "sqlalchemy.orm",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "sqlalchemy",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "datetime",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "database",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [],
      "classes": [
        {
          "name": "Prospect",
          "methods": [],
          "baseClasses": [
            "Base"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "The Prospect model is like a blueprint for a house, defining what rooms (attributes) it has and how they can be used (methods).",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Prospect Model",
        "purpose": "Defines the data structure and behavior for prospects in the application, facilitating interactions with the database.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "sqlalchemy.orm",
          "sqlalchemy",
          "datetime",
          "database"
        ],
        "how_to_modify": "To modify the Prospect model, you can add new attributes or methods to the class definition. Ensure any changes align with the database schema and consider how they may affect data retrieval and manipulation.",
        "risks": "Modifying the model without updating the database schema can lead to inconsistencies. Additionally, changes may affect other parts of the application that rely on the Prospect model.",
        "blurb": "The Prospect model is like a blueprint for a house, defining what rooms (attributes) it has and how they can be used (methods).",
        "dev_summary": "Defines the Prospect class for ORM with SQLAlchemy. No functions or constants are defined. Ensure database schema matches model changes.",
        "vibecoder_summary": "Imagine the Prospect model as a recipe for a delicious dish. It tells you what ingredients (attributes) you need and how to mix them (methods) to create something wonderful. Just be careful not to forget an ingredient when you tweak the recipe!",
        "edit_points": "Focus on the class definition to add or modify attributes and methods. Review any related database migration scripts if changes are made."
      }
    },
    {
      "path": "backend/app/models/deck.py",
      "language": "py",
      "ext": "",
      "size": 746,
      "lines": 18,
      "hash": "fcc46d9ce199d9a3c69d148dee3e31ea0ae6028c25a11e39070d3f5e832ca4b1",
      "mtime": 1757602652.9742877,
      "imports": [
        {
          "raw": "sqlalchemy",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "sqlalchemy.orm",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "datetime",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "database",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [],
      "classes": [
        {
          "name": "Deck",
          "methods": [],
          "baseClasses": [
            "Base"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "The Deck model is like a blueprint for creating and managing card decks in our application. It helps us keep track of all the decks we have and their properties.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Deck Model",
        "purpose": "Defines the Deck model for database interactions related to card decks.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "sqlalchemy",
          "sqlalchemy.orm",
          "datetime",
          "database"
        ],
        "how_to_modify": "To modify the Deck model, you can add attributes to the class that represent the properties of a deck, or implement methods that define behaviors related to decks. Ensure that any new attributes are reflected in the database schema if necessary.",
        "risks": "Modifying the model without updating the database schema can lead to inconsistencies. Additionally, changes to the model may affect other parts of the application that rely on this model.",
        "blurb": "The Deck model is like a blueprint for creating and managing card decks in our application. It helps us keep track of all the decks we have and their properties.",
        "dev_summary": "Defines a SQLAlchemy model for card decks. Ensure database migrations are handled when modifying attributes. No functions or constants defined yet.",
        "vibecoder_summary": "Imagine the Deck model as a magical box where all your card decks live. You can add new decks, change their names, or even create new types of decks! Just remember, if you change the box, you need to make sure everything inside matches!",
        "edit_points": "Look for the class definition in the file to add new attributes or methods. Pay attention to how the model interacts with the database to ensure proper functionality."
      }
    },
    {
      "path": "backend/app/models/__init__.py",
      "language": "py",
      "ext": "",
      "size": 79,
      "lines": 3,
      "hash": "1227b3126f772e38b6f0ec4492b9b4cad0583539d5241071f896d1284cf5594d",
      "mtime": 1757602652.974464,
      "imports": [
        {
          "raw": "prospect",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "deck",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "email",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "This is the gateway for your models! Think of it as the welcome mat for all your data structures, making sure everything is in the right place.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "__init__.py in backend/app/models",
        "purpose": "This file serves as an initializer for the models package in the backend application, allowing for the organization and import of model classes and functions.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "prospect",
          "deck",
          "email"
        ],
        "how_to_modify": "To modify this file, you can add or remove model classes or functions as needed. Ensure that any new models are properly imported and that the package structure remains intact.",
        "risks": "Modifying this file without understanding the implications on the overall models package can lead to import errors or broken functionality in other parts of the application. Be cautious about removing any existing imports or altering the package structure.",
        "blurb": "This is the gateway for your models! Think of it as the welcome mat for all your data structures, making sure everything is in the right place.",
        "dev_summary": "This file initializes the models package. It currently has no defined classes or functions. Ensure proper imports when adding new models.",
        "vibecoder_summary": "Imagine this file as the front desk of a hotel where all the guests (models) check in. If you want to add a new guest, just make sure they have a room (class) and that the front desk knows about them!",
        "edit_points": []
      }
    },
    {
      "path": "backend/app/models/email.py",
      "language": "py",
      "ext": "",
      "size": 837,
      "lines": 22,
      "hash": "db8a0e8a68f33c457781dad205a8a412b767c0687acbc0cf0e0f4ef48d2d9bb6",
      "mtime": 1757602652.978277,
      "imports": [
        {
          "raw": "__future__",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "sqlalchemy",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "sqlalchemy.orm",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "database",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [],
      "classes": [
        {
          "name": "Email",
          "methods": [],
          "baseClasses": [
            "Base"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "This file is the blueprint for how emails are stored and managed in our application, ensuring that all email data is organized and accessible.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Email Model",
        "purpose": "Defines the structure and behavior of email-related data in the application, facilitating database interactions through SQLAlchemy.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "__future__",
          "sqlalchemy",
          "sqlalchemy.orm",
          "database"
        ],
        "how_to_modify": "To modify the email model, you can add new fields or methods to the class that represents the email. Ensure that any changes to the model are reflected in the database schema through migrations.",
        "risks": "Modifying the email model can lead to inconsistencies in the database if migrations are not handled properly. Additionally, changes may affect other parts of the application that rely on this model.",
        "blurb": "This file is the blueprint for how emails are stored and managed in our application, ensuring that all email data is organized and accessible.",
        "dev_summary": "Defines an email model using SQLAlchemy for ORM. No functions or constants are defined. Ensure migrations are applied after changes.",
        "vibecoder_summary": "Think of this file as the recipe for our email dish. It tells the kitchen (database) how to prepare and serve emails. If you want to add a new ingredient (field), just remember to update the recipe card (migrations) so the chefs know what to do!",
        "edit_points": "Look for the class definition in this file to add or modify fields. Pay attention to any relationships with other models if applicable."
      }
    },
    {
      "path": "backend/app/schemas/prospect.py",
      "language": "py",
      "ext": "",
      "size": 962,
      "lines": 32,
      "hash": "1c331803936593e138bf3a4d7eba31bd9de510a7677a52433f832b9e4e2480c1",
      "mtime": 1757602652.9817936,
      "imports": [
        {
          "raw": "pydantic",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [],
      "classes": [
        {
          "name": "ProspectCreate",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "ProspectUpdate",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "ProspectOut",
          "methods": [],
          "baseClasses": [
            "ProspectCreate"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [
          "ProspectCreate",
          "ProspectUpdate"
        ],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as a blueprint for a house. It defines what rooms (data fields) are needed and how they should be built (validated).",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Prospect Schema Definition",
        "purpose": "Defines data validation and serialization for prospect-related data using Pydantic.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "pydantic",
          "typing"
        ],
        "how_to_modify": "To modify the schema, add or update Pydantic model fields to reflect the desired structure of prospect data. Ensure that any changes maintain data validation rules.",
        "risks": "Modifying the schema incorrectly can lead to validation errors or data integrity issues. Ensure that any changes are tested thoroughly.",
        "blurb": "Think of this file as a blueprint for a house. It defines what rooms (data fields) are needed and how they should be built (validated).",
        "dev_summary": "Defines Pydantic models for prospect data validation. No functions or classes are defined yet, but it serves as a foundation for data structures. Be cautious with changes to ensure compatibility.",
        "vibecoder_summary": "Imagine you're crafting a treasure map. This file helps you draw the map accurately, showing where each treasure (data point) is buried and what it looks like. If you change the map, make sure the treasures are still where they should be!",
        "edit_points": "Focus on adding or modifying fields in the Pydantic model to adjust the structure of the prospect data."
      }
    },
    {
      "path": "backend/app/schemas/deck.py",
      "language": "py",
      "ext": "",
      "size": 764,
      "lines": 34,
      "hash": "11ad39922f476b0e3cf4f20d2c66055bbbe9c3825e097ff8e592285e6a47d6a1",
      "mtime": 1757602652.9819784,
      "imports": [
        {
          "raw": "__future__",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "pydantic",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [],
      "classes": [
        {
          "name": "Slide",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "DeckOut",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "SlideIn",
          "methods": [
            "_ensure_list"
          ],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "DeckUpdate",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [
          "Slide",
          "DeckOut",
          "SlideIn",
          "DeckUpdate"
        ],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "This file is like a blueprint for decks, ensuring that all deck data is structured and validated before use.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Deck Schema Definition",
        "purpose": "Defines data structures for deck-related entities using Pydantic for data validation and settings management.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "__future__",
          "typing",
          "pydantic"
        ],
        "how_to_modify": "To modify the schema, add or update Pydantic models to define new data structures or validation rules. Ensure to maintain type hints for clarity and validation.",
        "risks": "Improper modifications may lead to validation errors or unexpected behavior in data handling. Ensure that any changes are tested thoroughly.",
        "blurb": "This file is like a blueprint for decks, ensuring that all deck data is structured and validated before use.",
        "dev_summary": "Defines Pydantic models for deck schemas. No functions or classes are defined yet. Ensure type hints are used for clarity.",
        "vibecoder_summary": "Imagine this file as a recipe book for decks, where each recipe (schema) tells you exactly what ingredients (data) you need and how to mix them (validate) to create the perfect deck!",
        "edit_points": "Look for areas where new Pydantic models can be added or existing ones can be modified to enhance data validation."
      }
    },
    {
      "path": "backend/app/schemas/__init__.py",
      "language": "py",
      "ext": "",
      "size": 0,
      "lines": 0,
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "mtime": 1757602652.9821115,
      "imports": [],
      "exports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the front door to your schema library. It welcomes all the schema definitions and keeps everything organized and tidy.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Initialization of Schema Module",
        "purpose": "This file serves as the initialization point for the schemas in the backend application, allowing for organized structure and potential imports of schema-related components.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [],
        "how_to_modify": "You can add new schema definitions or import existing ones into this file. Ensure that any new schemas are properly defined and follow the existing conventions.",
        "risks": "Modifying this file without understanding the overall schema structure may lead to import errors or inconsistencies in schema definitions across the application.",
        "blurb": "Think of this file as the front door to your schema library. It welcomes all the schema definitions and keeps everything organized and tidy.",
        "dev_summary": "This is an empty __init__.py file intended for schema organization. No functions or classes are defined here, but it can be used to import other schema modules.",
        "vibecoder_summary": "Imagine this file as the welcome mat of your schema house. It doesn't have any furniture yet, but it\u2019s ready to invite all the cool schema stuff to come in and hang out!",
        "edit_points": [
          "Consider adding imports for schema definitions from other files.",
          "Ensure that the module structure remains clear and organized."
        ]
      }
    },
    {
      "path": "backend/app/schemas/email.py",
      "language": "py",
      "ext": "",
      "size": 908,
      "lines": 36,
      "hash": "7443c066e636f4b6402df071b87eaa36c73b2010634d0616f8135fb7f41e12d8",
      "mtime": 1757602652.9849823,
      "imports": [
        {
          "raw": "__future__",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "pydantic",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [],
      "classes": [
        {
          "name": "EmailOut",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "EmailIn",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "EmailUpdate",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "EmailBatchOut",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "ProspectContext",
          "methods": [
            "coerce_str"
          ],
          "baseClasses": [
            "BaseModel"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [
          "EmailOut",
          "EmailIn",
          "EmailUpdate",
          "EmailBatchOut",
          "ProspectContext"
        ],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "This file is like a blueprint for emails, ensuring they have the right structure before being sent out into the world.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Email Schema Definitions",
        "purpose": "Defines data structures for email validation and serialization using Pydantic.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "__future__",
          "typing",
          "pydantic"
        ],
        "how_to_modify": "To modify the email schema, add or update Pydantic model fields according to your validation needs. Ensure that any new fields are properly typed and validated.",
        "risks": "Improper modifications may lead to validation errors or unexpected behavior in email handling. Ensure that changes are tested thoroughly.",
        "blurb": "This file is like a blueprint for emails, ensuring they have the right structure before being sent out into the world.",
        "dev_summary": "Defines email schemas using Pydantic for validation. No functions or classes are defined, but it relies on external libraries for type checking and validation.",
        "vibecoder_summary": "Imagine this file as a recipe card for emails. It tells you what ingredients (fields) you need and how to mix them (validate) to make sure your email dish comes out just right!",
        "edit_points": "Look for areas where Pydantic models are defined or where new fields might be added to enhance email validation."
      }
    },
    {
      "path": "backend/app/templates/deck.html",
      "language": "other",
      "ext": "",
      "size": 3833,
      "lines": 155,
      "hash": "002ca261b89b7f2f890f4638dd3dd7baaecc5f1a9017bc79ca477f6a35151740",
      "mtime": 1757602652.9853106,
      "imports": [],
      "exports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed"
    },
    {
      "path": "backend/app/services/emailgeneration.py",
      "language": "py",
      "ext": "",
      "size": 7608,
      "lines": 160,
      "hash": "fa3e25cac6cce7fb36098a3d733432c7054960d4d853d3654d47cc69f7108225",
      "mtime": 1757602652.9858627,
      "imports": [
        {
          "raw": "__future__",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "json",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "logging",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "config",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [
        {
          "name": "_openai_json_response",
          "params": [
            "prompt"
          ],
          "decorators": [],
          "calls": [
            "_stub_response",
            "create",
            "loads",
            "EmailAIUnavailableError",
            "info",
            "OpenAI"
          ],
          "sideEffects": [
            "io"
          ]
        },
        {
          "name": "_stub_response",
          "params": [
            "prompt"
          ],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "io"
          ]
        },
        {
          "name": "_coalesce",
          "params": [
            "v",
            "default"
          ],
          "decorators": [],
          "calls": [
            "isinstance",
            "strip"
          ],
          "sideEffects": [
            "io"
          ]
        },
        {
          "name": "generate_emails",
          "params": [
            "prospect"
          ],
          "decorators": [],
          "calls": [
            "_openai_json_response",
            "strip",
            "_coalesce",
            "append",
            "replace",
            "get",
            "dumps",
            "EmailAIFormatError"
          ],
          "sideEffects": [
            "io"
          ]
        }
      ],
      "classes": [
        {
          "name": "EmailAIUnavailableError",
          "methods": [],
          "baseClasses": [
            "Exception"
          ]
        },
        {
          "name": "EmailAIFormatError",
          "methods": [],
          "baseClasses": [
            "Exception"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "This is the behind-the-scenes wizard that crafts your emails, ensuring they look just right before they reach your inbox.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Email Generation Service",
        "purpose": "This module is responsible for generating email content based on templates and data provided by other parts of the application.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "__future__",
          "json",
          "logging",
          "typing",
          "config"
        ],
        "how_to_modify": "To modify this file, focus on adding or updating email templates and the logic that populates them with data. Ensure that any changes maintain the integrity of the email format and adhere to the expected data structures.",
        "risks": "Modifying the email generation logic could lead to incorrect email formats or missing data in the emails sent to users. Additionally, changes might affect logging and error handling if not properly managed.",
        "blurb": "This is the behind-the-scenes wizard that crafts your emails, ensuring they look just right before they reach your inbox.",
        "dev_summary": "Handles email content generation. Interfaces with JSON for data handling and logging for error tracking. Ensure data structures match expected formats to avoid runtime errors.",
        "vibecoder_summary": "Imagine a magical mailroom where letters are crafted with care! This script is the wizard that takes raw data and turns it into beautifully formatted emails, ready to be sent out into the world.",
        "edit_points": "Focus on areas where email templates are defined and where data is injected into these templates. Look for any placeholder comments or sections that indicate where customization is allowed."
      }
    },
    {
      "path": "backend/app/services/ai.py",
      "language": "py",
      "ext": "",
      "size": 18481,
      "lines": 336,
      "hash": "bf03ff017ca2df9c5f60b59e11f85618bf5dc9715f5cca5244dd7f6296d373a7",
      "mtime": 1757602652.9863427,
      "imports": [
        {
          "raw": "__future__",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "json",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "logging",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "config",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [
        {
          "name": "_strip_markup",
          "params": [
            "text"
          ],
          "decorators": [],
          "calls": [
            "strip",
            "sub",
            "str"
          ],
          "sideEffects": []
        },
        {
          "name": "_truncate",
          "params": [
            "text",
            "max_chars"
          ],
          "decorators": [],
          "calls": [
            "len",
            "strip",
            "rstrip"
          ],
          "sideEffects": []
        },
        {
          "name": "_coerce_bullets",
          "params": [
            "value"
          ],
          "decorators": [],
          "calls": [
            "isinstance",
            "append",
            "strip",
            "split",
            "_strip_markup",
            "_truncate"
          ],
          "sideEffects": []
        },
        {
          "name": "_normalize_deck_obj",
          "params": [
            "obj"
          ],
          "decorators": [],
          "calls": [
            "isinstance",
            "append",
            "get",
            "_truncate",
            "_strip_markup",
            "_coerce_bullets"
          ],
          "sideEffects": []
        },
        {
          "name": "_openai_json_response",
          "params": [
            "prompt"
          ],
          "decorators": [],
          "calls": [
            "AIUnavailableError",
            "create",
            "loads",
            "getattr",
            "info",
            "OpenAI"
          ],
          "sideEffects": []
        },
        {
          "name": "generate_deck_content",
          "params": [
            "prospect"
          ],
          "decorators": [],
          "calls": [
            "_normalize_deck_obj",
            "strip",
            "_openai_json_response",
            "get",
            "dumps",
            "enumerate"
          ],
          "sideEffects": []
        },
        {
          "name": "edit_deck_slide_content",
          "params": [
            "current_slide",
            "user_prompt",
            "prospect",
            "slide_index"
          ],
          "decorators": [],
          "calls": [
            "error",
            "isinstance",
            "len",
            "_openai_json_response",
            "get",
            "AIFormatError",
            "dumps",
            "_truncate",
            "_strip_markup",
            "_coerce_bullets"
          ],
          "sideEffects": []
        },
        {
          "name": "edit_email_content",
          "params": [
            "current_subject",
            "current_body",
            "user_prompt",
            "prospect",
            "sequence_index"
          ],
          "decorators": [],
          "calls": [
            "error",
            "isinstance",
            "_openai_json_response",
            "strip",
            "get",
            "AIFormatError",
            "dumps",
            "_truncate",
            "_strip_markup"
          ],
          "sideEffects": []
        }
      ],
      "classes": [
        {
          "name": "AIUnavailableError",
          "methods": [],
          "baseClasses": [
            "Exception"
          ]
        },
        {
          "name": "AIFormatError",
          "methods": [],
          "baseClasses": [
            "Exception"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this module as the brain of your application, where all the smart decisions are made. Tread carefully when adding new thoughts!",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "AI Service Module",
        "purpose": "This module is designed to provide AI-related functionalities for the backend application, potentially including data processing, model interaction, or decision-making capabilities.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "__future__",
          "json",
          "logging",
          "typing",
          "config"
        ],
        "how_to_modify": "To modify this file, consider adding new AI-related functions or classes that leverage the existing imports. Ensure that any new functionality aligns with the overall architecture of the backend services.",
        "risks": "Modifying this file without understanding the AI logic could lead to incorrect behavior in the application. Additionally, changes might affect logging and configuration settings, which could introduce bugs or performance issues.",
        "blurb": "Think of this module as the brain of your application, where all the smart decisions are made. Tread carefully when adding new thoughts!",
        "dev_summary": "This Python module serves as a service layer for AI functionalities. It imports essential libraries for JSON handling, logging, and type annotations. No defined functions or classes are present, indicating it may serve as a foundation for future development.",
        "vibecoder_summary": "Imagine this file as a blank canvas waiting for a brilliant artist to paint a masterpiece of AI magic. You can add strokes of code to create intelligent features, but be cautious not to spill paint everywhere!",
        "edit_points": []
      }
    },
    {
      "path": "backend/app/services/__init__.py",
      "language": "py",
      "ext": "",
      "size": 0,
      "lines": 0,
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "mtime": 1757602652.9864764,
      "imports": [],
      "exports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the front door to a service department in a large office building. It welcomes visitors and directs them to the right service without revealing the inner workings.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "__init__.py in backend/app/services",
        "purpose": "This file serves as an initializer for the services module in the backend application, allowing for the organization and management of service-related functionalities.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [],
        "how_to_modify": "You can add service-related classes or functions to this file to enhance the module's capabilities. Ensure that any new additions are properly documented and tested.",
        "risks": "Modifying this file without understanding the overall architecture may lead to broken imports or mismanagement of service functionalities. Ensure that changes are compatible with other parts of the application.",
        "blurb": "Think of this file as the front door to a service department in a large office building. It welcomes visitors and directs them to the right service without revealing the inner workings.",
        "dev_summary": "This file initializes the services module. Currently, it contains no functions or classes. Be cautious when adding new code to maintain module integrity.",
        "vibecoder_summary": "Imagine this file as the welcome mat of a cozy caf\u00e9. It doesn't serve coffee itself, but it sets the stage for all the delicious brews that come from the baristas (services) inside. You can add new recipes (functions) here, but make sure they blend well with the caf\u00e9's vibe!",
        "edit_points": "Consider adding new service classes or utility functions that can be used across the application. Ensure to keep the code clean and organized."
      }
    },
    {
      "path": "backend/app/services/pdf.py",
      "language": "py",
      "ext": "",
      "size": 2704,
      "lines": 67,
      "hash": "c3ff6c6a7928b4f2be0343fe8922b60ed6361ff79a4d67bc977ae2f75e280cf7",
      "mtime": 1757602652.9869127,
      "imports": [
        {
          "raw": "__future__",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "os",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "jinja2",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "weasyprint",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "config",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "utils",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [
        {
          "name": "_resolve_generated_dir",
          "params": [],
          "decorators": [],
          "calls": [
            "join",
            "abspath",
            "isabs",
            "rstrip"
          ],
          "sideEffects": [
            "io"
          ]
        },
        {
          "name": "render_deck_to_pdf",
          "params": [
            "slides",
            "deck_title",
            "out_dir"
          ],
          "decorators": [],
          "calls": [
            "slugify",
            "write_pdf",
            "render",
            "RenderError",
            "exists",
            "makedirs",
            "join",
            "FileIOError",
            "TemplateError",
            "_resolve_generated_dir",
            "get_template",
            "HTML"
          ],
          "sideEffects": [
            "io"
          ]
        }
      ],
      "classes": [
        {
          "name": "TemplateError",
          "methods": [],
          "baseClasses": [
            "Exception"
          ]
        },
        {
          "name": "RenderError",
          "methods": [],
          "baseClasses": [
            "Exception"
          ]
        },
        {
          "name": "FileIOError",
          "methods": [],
          "baseClasses": [
            "Exception"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this module as a digital wizard that conjures PDFs from thin air, transforming data into beautifully formatted documents.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "PDF Service Module",
        "purpose": "This module is designed to handle PDF generation and manipulation tasks within the application.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "__future__",
          "os",
          "typing",
          "jinja2",
          "weasyprint",
          "config",
          "utils"
        ],
        "how_to_modify": "To modify this module, focus on integrating new PDF generation features or adjusting existing configurations. Ensure that any changes align with the expected input and output formats for PDF files.",
        "risks": "Modifying this module may lead to issues in PDF generation or formatting if not tested thoroughly. Changes to external dependencies could also introduce compatibility issues.",
        "blurb": "Think of this module as a digital wizard that conjures PDFs from thin air, transforming data into beautifully formatted documents.",
        "dev_summary": "Handles PDF generation using WeasyPrint and Jinja2 for templating. Ensure compatibility with external libraries and maintain input/output integrity.",
        "vibecoder_summary": "Imagine a magical book that takes your ideas and turns them into printed pages! This module is like that book, helping your app create stunning PDFs from your data.",
        "edit_points": "Focus on areas where PDF generation logic is implemented, especially where external libraries like WeasyPrint and Jinja2 are utilized."
      }
    },
    {
      "path": "backend/app/services/utils.py",
      "language": "py",
      "ext": "",
      "size": 371,
      "lines": 11,
      "hash": "edbcd5a30fcf2dfc317dadfd40b1016382beafb47ece5c72dfb992df6271d3a9",
      "mtime": 1757602652.9916787,
      "imports": [
        {
          "raw": "re",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "unicodedata",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "datetime",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [
        {
          "name": "slugify",
          "params": [
            "value"
          ],
          "decorators": [],
          "calls": [
            "strip",
            "decode",
            "normalize",
            "encode",
            "lower",
            "sub"
          ],
          "sideEffects": []
        },
        {
          "name": "now_iso",
          "params": [],
          "decorators": [],
          "calls": [
            "utcnow",
            "isoformat"
          ],
          "sideEffects": []
        }
      ],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as a toolbox for your backend services, filled with handy tools that help make your data shine and your dates dance!",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Utility Functions for Backend Services",
        "purpose": "This file contains utility functions that assist various backend services in processing data, formatting strings, and handling date and time operations.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "re",
          "unicodedata",
          "datetime"
        ],
        "how_to_modify": "To modify this file, add new utility functions or update existing ones. Ensure that any new functions are well-documented and tested to maintain code quality.",
        "risks": "Modifying utility functions may impact multiple services that rely on them. Ensure thorough testing after changes to avoid breaking functionality across the application.",
        "blurb": "Think of this file as a toolbox for your backend services, filled with handy tools that help make your data shine and your dates dance!",
        "dev_summary": "Contains utility functions for data processing and formatting. No defined functions or classes yet. Be cautious of changes as they affect multiple services.",
        "vibecoder_summary": "Imagine this file as a magic toolbox where you can find all sorts of helpful gadgets to make your backend services work better. Just be careful when adding new tools, as they might change how everything else works!",
        "edit_points": "Look for areas where you can add new functions or enhance existing ones, particularly around data formatting and date handling."
      }
    },
    {
      "path": "backend/app/services/slides.py",
      "language": "py",
      "ext": "",
      "size": 1270,
      "lines": 31,
      "hash": "04971e88d1d8e07fd8c571b74af1f2de600e618a39b9b43a1c1b6c6582048eed",
      "mtime": 1757602652.991871,
      "imports": [
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "re",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "config",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "exports": [],
      "functions": [
        {
          "name": "_strip_markup",
          "params": [
            "text"
          ],
          "decorators": [],
          "calls": [
            "strip",
            "sub",
            "str"
          ],
          "sideEffects": []
        },
        {
          "name": "_truncate",
          "params": [
            "text",
            "max_chars"
          ],
          "decorators": [],
          "calls": [
            "len",
            "strip",
            "rstrip"
          ],
          "sideEffects": []
        },
        {
          "name": "validate_and_normalize_slides",
          "params": [
            "slides"
          ],
          "decorators": [],
          "calls": [
            "isinstance",
            "append",
            "get",
            "_strip_markup",
            "_truncate"
          ],
          "sideEffects": []
        }
      ],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this module as the backstage crew of a theater production, managing all the slides that will be shown to the audience. It keeps everything running smoothly behind the scenes.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Slides Service Module",
        "purpose": "This module is designed to manage slide-related functionalities within the backend application, likely handling data processing or business logic related to slides.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "typing",
          "re",
          "config"
        ],
        "how_to_modify": "To modify this module, consider adding new functions or classes that encapsulate slide-related logic. Ensure to import any necessary external dependencies and follow existing coding conventions.",
        "risks": "Modifying this module without understanding its integration with other parts of the application may lead to unexpected behavior or errors. Be cautious of any data handling that could affect the integrity of slide data.",
        "blurb": "Think of this module as the backstage crew of a theater production, managing all the slides that will be shown to the audience. It keeps everything running smoothly behind the scenes.",
        "dev_summary": "Handles slide-related logic; currently no defined functions or classes. Ensure proper data handling and integration with other services.",
        "vibecoder_summary": "Imagine a library where each slide is a book. This module is the librarian, organizing and managing all the books so that when it's showtime, everything is in the right place and ready to go!",
        "edit_points": "Look for areas where you can introduce new functionality related to slides, such as data validation or processing methods. Pay attention to how data flows in and out of this module."
      }
    },
    {
      "path": "backend/static/init",
      "language": "other",
      "ext": "",
      "size": 0,
      "lines": 0,
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "mtime": 1757602652.9923244,
      "imports": [],
      "exports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed"
    },
    {
      "path": "offdeal-frontend/postcss.config.mjs",
      "language": "js",
      "ext": "",
      "size": 81,
      "lines": 5,
      "hash": "141ef24ca27a99d08962210fdf20212d3435fdcfa21b46cd88b44d22f751dfae",
      "mtime": 1757602652.9942527,
      "imports": [],
      "exports": [
        "default"
      ],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the recipe for your CSS dish, where you can add spices (plugins) to enhance the flavor (functionality) of your styles.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "PostCSS Configuration",
        "purpose": "This file configures PostCSS, a tool for transforming CSS with JavaScript plugins, allowing for advanced styling capabilities in the project.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [],
        "how_to_modify": "To modify this configuration, you can add or remove PostCSS plugins in the exported configuration object. Ensure that any new plugins are installed in your project.",
        "risks": "Incorrect configurations or incompatible plugins may lead to build failures or unexpected styling issues. Always test changes in a development environment before deploying.",
        "blurb": "Think of this file as the recipe for your CSS dish, where you can add spices (plugins) to enhance the flavor (functionality) of your styles.",
        "dev_summary": "Configures PostCSS for the project. No functions or classes defined. Ensure compatibility of plugins.",
        "vibecoder_summary": "Imagine you're a chef in a kitchen, and this file is your cookbook. You can tweak the ingredients (plugins) to make your CSS dish just right, but be careful not to mix flavors that clash!",
        "edit_points": "Look for the section where plugins are defined; this is where you can add or adjust the PostCSS plugins."
      }
    },
    {
      "path": "offdeal-frontend/next-env.d.ts",
      "language": "ts",
      "ext": "",
      "size": 211,
      "lines": 5,
      "hash": "f2b3bca04d1bfe583daae1e1f798c92ec24bb6693bd88d0a09ba6802dee362a8",
      "mtime": 1757602652.9947195,
      "imports": [],
      "exports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as a guidebook for TypeScript, helping it understand the unique landscape of your Next.js application. It ensures that everything is in the right place and correctly labeled.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "TypeScript Environment Definitions for Next.js",
        "purpose": "This file provides TypeScript type definitions for the Next.js environment, ensuring type safety and autocompletion for Next.js features.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [],
        "how_to_modify": "You can add or modify type definitions as needed to accommodate new features or changes in your Next.js application. Ensure that any changes are consistent with the Next.js framework's expected types.",
        "risks": "Improper modifications may lead to type errors in your application, resulting in a loss of type safety and potentially causing runtime issues. Always validate changes with TypeScript's compiler.",
        "blurb": "Think of this file as a guidebook for TypeScript, helping it understand the unique landscape of your Next.js application. It ensures that everything is in the right place and correctly labeled.",
        "dev_summary": "Defines TypeScript types for the Next.js environment. No functions or classes are defined here. Be cautious with type changes to avoid breaking type safety.",
        "vibecoder_summary": "Imagine this file as a map for a treasure hunt, showing TypeScript where to find all the hidden gems in your Next.js project. If you change the map, make sure the treasure is still where you expect it to be!",
        "edit_points": []
      }
    },
    {
      "path": "offdeal-frontend/README.md",
      "language": "other",
      "ext": "",
      "size": 1450,
      "lines": 36,
      "hash": "60b55ff7df79af72590f9524208e46642bc32bdc175cdad41349681c0e2f958f",
      "mtime": 1757602652.99492,
      "imports": [],
      "exports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed"
    },
    {
      "path": "offdeal-frontend/.gitignore",
      "language": "other",
      "ext": "",
      "size": 480,
      "lines": 41,
      "hash": "207e265ff4901f9ad9f96d8ce08530e04f9fc600815472a66d0a446096d654cd",
      "mtime": 1757602652.9955177,
      "imports": [],
      "exports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed"
    },
    {
      "path": "offdeal-frontend/package-lock.json",
      "language": "other",
      "ext": "",
      "size": 221925,
      "lines": 6396,
      "hash": "361a9647191c33c655ea1de154a8e09d854c0d3d388926b743e8b756d89c9977",
      "mtime": 1757602652.9961812,
      "imports": [],
      "exports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed"
    },
    {
      "path": "offdeal-frontend/package.json",
      "language": "other",
      "ext": "",
      "size": 669,
      "lines": 30,
      "hash": "59371dfe34a04f59fef0c99ea76bee866dd8ccb764358e84bb17d2234fcd7258",
      "mtime": 1757602652.996597,
      "imports": [],
      "exports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed"
    },
    {
      "path": "offdeal-frontend/tsconfig.json",
      "language": "other",
      "ext": "",
      "size": 602,
      "lines": 27,
      "hash": "83d292a6930a317ea31ef48e220097d2ca10c6c505f41d5954795acef48ca3b9",
      "mtime": 1757602652.9967892,
      "imports": [],
      "exports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed"
    },
    {
      "path": "offdeal-frontend/eslint.config.mjs",
      "language": "js",
      "ext": "",
      "size": 393,
      "lines": 16,
      "hash": "3de4ba23ff1f687685651cad622700613998de80daa30ac4d82c47776a04019d",
      "mtime": 1757602652.996972,
      "imports": [
        {
          "raw": "path",
          "kind": "esm"
        },
        {
          "raw": "url",
          "kind": "esm"
        },
        {
          "raw": "@eslint/eslintrc",
          "kind": "esm"
        }
      ],
      "exports": [
        "default"
      ],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the rulebook for your JavaScript code. It helps keep your code clean and consistent, like a well-organized library.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "ESLint Configuration File",
        "purpose": "This file configures ESLint, a tool for identifying and fixing problems in JavaScript code. It sets rules and environments for linting the codebase.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "path",
          "url",
          "@eslint/eslintrc"
        ],
        "how_to_modify": "To modify the ESLint configuration, you can add or change rules in the exported configuration object. Ensure you understand the implications of each rule you modify.",
        "risks": "Incorrect configurations may lead to linting errors or warnings that could disrupt the development process. Additionally, adding incompatible rules may cause ESLint to fail.",
        "blurb": "Think of this file as the rulebook for your JavaScript code. It helps keep your code clean and consistent, like a well-organized library.",
        "dev_summary": "Configures ESLint with specified rules and environments. No functions or classes are defined here; it's purely a configuration file. Be cautious with rule changes.",
        "vibecoder_summary": "Imagine this file as the conductor of an orchestra, ensuring every musician (your code) plays in harmony. Change a note, and you might create a beautiful symphony or a cacophony!",
        "edit_points": "Focus on the rules section of the configuration object to make changes. Look for comments or documentation within the file for guidance on specific rules."
      }
    },
    {
      "path": "offdeal-frontend/next.config.ts",
      "language": "ts",
      "ext": "",
      "size": 133,
      "lines": 7,
      "hash": "614bce25b089c3f19b1e17a6346c74b858034040154c6621e7d35303004767cc",
      "mtime": 1757602652.9971485,
      "imports": [
        {
          "raw": "next",
          "kind": "esm"
        }
      ],
      "exports": [
        "default"
      ],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the blueprint for your Next.js house. It tells the builders (the framework) how to construct your application, what materials to use, and how to make it unique.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Next.js Configuration File",
        "purpose": "This file configures the Next.js application, defining settings such as build options, environment variables, and custom webpack configurations.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "next"
        ],
        "how_to_modify": "To modify this file, adjust the configuration options as needed. Common changes include setting environment variables, modifying build settings, or adding custom webpack configurations.",
        "risks": "Improper modifications can lead to build failures, unexpected behavior in the application, or performance issues. Always ensure to test changes in a development environment before deploying.",
        "blurb": "Think of this file as the blueprint for your Next.js house. It tells the builders (the framework) how to construct your application, what materials to use, and how to make it unique.",
        "dev_summary": "This TypeScript file configures a Next.js application. It does not contain any functions or classes but serves as a central place for application settings. Be cautious with changes to avoid breaking the build.",
        "vibecoder_summary": "Imagine you\u2019re the architect of a magical castle (your app) and this file is your blueprint. You can tweak the design, but if you change too much, the castle might not stand tall anymore!",
        "edit_points": "Look for sections that define configuration options. Common areas to edit include 'webpack' settings, 'env' variables, and 'experimental' features."
      }
    },
    {
      "path": "offdeal-frontend/src/types.ts",
      "language": "ts",
      "ext": "",
      "size": 812,
      "lines": 35,
      "hash": "1bd2fa91776d3fae71e38a0a2879319fa0c17ac5d49adaa1b12c55eb3fce4d52",
      "mtime": 1757602652.9989088,
      "imports": [],
      "exports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the blueprint for the Offdeal frontend. It defines the shapes and structures of data that the application will use, ensuring everything fits together nicely.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Type Definitions for Offdeal Frontend",
        "purpose": "This file contains TypeScript type definitions used throughout the Offdeal frontend application to ensure type safety and improve code maintainability.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [],
        "how_to_modify": "To modify this file, add or update type definitions as needed. Ensure that any changes are consistent with existing types and do not introduce type conflicts.",
        "risks": "Modifying type definitions can lead to type errors in other parts of the application if not done carefully. Ensure that all usages of the modified types are updated accordingly.",
        "blurb": "Think of this file as the blueprint for the Offdeal frontend. It defines the shapes and structures of data that the application will use, ensuring everything fits together nicely.",
        "dev_summary": "This file defines TypeScript types for the Offdeal frontend. It serves as a central location for type definitions, which can be referenced throughout the application. Be cautious when modifying types to avoid breaking type safety.",
        "vibecoder_summary": "Imagine this file as a recipe book for the Offdeal frontend kitchen. It lists all the ingredients (types) needed to whip up delicious features without any unexpected surprises!",
        "edit_points": "Look for areas where new types are needed or existing types need to be modified. Pay attention to any related files that might reference these types."
      }
    },
    {
      "path": "offdeal-frontend/src/app/layout.tsx",
      "language": "ts",
      "ext": "",
      "size": 324,
      "lines": 14,
      "hash": "f7f47f65ab000db910b5a147da23461abab11f99b071cb5877e98051b53b7a9a",
      "mtime": 1757602652.9981987,
      "imports": [
        {
          "raw": "./globals.css",
          "kind": "esm"
        },
        {
          "raw": "next",
          "kind": "esm"
        }
      ],
      "exports": [
        "default"
      ],
      "functions": [
        {
          "name": "RootLayout",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        }
      ],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": "nextjs",
        "isRoute": true,
        "isReactComponent": true,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "This is the cozy home for your app's pages, where they all gather to share a common look and feel!",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Layout Component",
        "purpose": "Defines the main layout structure for the application, serving as a wrapper for pages rendered in a Next.js application.",
        "key_functions": [],
        "internal_dependencies": [
          "offdeal-frontend/src/app/globals.css"
        ],
        "external_dependencies": [
          "next"
        ],
        "how_to_modify": "To modify the layout, you can add or change the structure of the JSX returned in this file. Ensure that any new components or styles you introduce are properly imported.",
        "risks": "Changes to the layout may affect the overall appearance and functionality of all pages that use this layout. Be cautious with structural changes and test thoroughly.",
        "blurb": "This is the cozy home for your app's pages, where they all gather to share a common look and feel!",
        "dev_summary": "This file serves as a layout component in a Next.js application, providing a consistent structure across different pages. It interfaces with global styles and is crucial for maintaining a unified design. Be mindful of how changes can ripple through the app.",
        "vibecoder_summary": "Imagine this layout as the stage where all your app's actors (pages) perform. It sets the scene and ensures everyone looks good together. Tweak the backdrop, but remember: a change in the stage can change the whole show!",
        "edit_points": []
      }
    },
    {
      "path": "offdeal-frontend/src/app/page.tsx",
      "language": "ts",
      "ext": "",
      "size": 41334,
      "lines": 983,
      "hash": "8cfa15ce3da2bbab33e15b6cab30e6865d9bf86381e9a45d2f8911be0bff56b6",
      "mtime": 1757602652.9985085,
      "imports": [
        {
          "raw": "react",
          "kind": "esm"
        },
        {
          "raw": "../lib/api",
          "kind": "esm"
        },
        {
          "raw": "../types",
          "kind": "esm"
        }
      ],
      "exports": [
        "default"
      ],
      "functions": [
        {
          "name": "Page",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleCreateProspect",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleEditProspect",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleUpdateProspect",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleGenerateDeck",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleRenderAndDownload",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleRefreshPdf",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleOpenDeck",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleOpenEmail",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "toggleEmailSent",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleGenerateEmails",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "selectEmail",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "DeckEditor",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "save",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleAIEdit",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "EmailEditor",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "save",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleAIEdit",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        }
      ],
      "classes": [],
      "routes": [
        {
          "method": "GET",
          "path": "/",
          "handler": "default"
        }
      ],
      "symbols": {
        "constants": [],
        "hooks": [
          "useState",
          "useEffect",
          "useMemo"
        ],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": "nextjs",
        "isRoute": true,
        "isReactComponent": true,
        "isAPI": false,
        "isClientComponent": true
      },
      "warnings": [],
      "blurb": "This is your go-to page component for rendering dynamic content in a Next.js app. It interacts with React hooks to manage state and lifecycle events.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "Page Component in Next.js",
        "purpose": "This file defines a client-side page component for a Next.js application, serving as a route that renders UI elements based on state and effects.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "react",
          "../lib/api",
          "../types"
        ],
        "how_to_modify": "To modify this file, focus on the hooks (useState, useEffect, useMemo) to manage state and side effects. You can also adjust the rendering logic based on the component's state.",
        "risks": "Be cautious when modifying state management logic as it can lead to unexpected UI behavior. Ensure that any changes to external dependencies are compatible with the existing code.",
        "blurb": "This is your go-to page component for rendering dynamic content in a Next.js app. It interacts with React hooks to manage state and lifecycle events.",
        "dev_summary": "Defines a client-side page component in Next.js. Utilizes React hooks for state and effects. No direct API interactions; relies on external modules for data types and API calls.",
        "vibecoder_summary": "Imagine this file as a stage where actors (UI elements) perform based on the script (state) and director's cues (effects). Tweak the script to change the performance, but be careful not to confuse the actors!",
        "edit_points": "Focus on the useState and useEffect hooks for managing component behavior. Consider how changes might affect the overall user experience."
      }
    },
    {
      "path": "offdeal-frontend/src/app/globals.css",
      "language": "other",
      "ext": "",
      "size": 2408,
      "lines": 128,
      "hash": "2ab6c631cbd7a617b4bf441b1f19c465799f92833058e0fd489d0df0391a6867",
      "mtime": 1757602652.9987152,
      "imports": [],
      "exports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed"
    },
    {
      "path": "offdeal-frontend/src/lib/api.ts",
      "language": "ts",
      "ext": "",
      "size": 3034,
      "lines": 96,
      "hash": "91e09c0b8d4869a95889089a058eead203a4cfb1b1ad9550fe7435036c325804",
      "mtime": 1757602652.9992561,
      "imports": [],
      "exports": [
        "named"
      ],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the post office of your application, handling all the requests and responses between your app and the outside world.",
      "skipped": false,
      "skipReason": null,
      "summary": {
        "title": "API Module",
        "purpose": "This TypeScript file serves as a library for API interactions within the offdeal frontend application.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [],
        "how_to_modify": "To modify this file, consider adding new functions for API requests or updating existing ones to handle new endpoints or data formats. Ensure to maintain consistent naming conventions and error handling practices.",
        "risks": "Modifying this file could lead to broken API calls if not done carefully. Ensure that any changes are thoroughly tested to avoid runtime errors or unexpected behavior in the application.",
        "blurb": "Think of this file as the post office of your application, handling all the requests and responses between your app and the outside world.",
        "dev_summary": "This file is a TypeScript module for managing API interactions. It currently has no defined functions, classes, or constants. Be cautious when adding new code to ensure it aligns with existing patterns.",
        "vibecoder_summary": "Imagine this file as a friendly messenger that carries your messages to and from the big world of the internet. If you want to send new messages or change how they\u2019re sent, just make sure the messenger knows how to do it without getting lost!",
        "edit_points": []
      }
    }
  ],
  "warnings": []
}