{
  "files": [
    {
      "path": "README.md",
      "language": "other",
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed",
      "size": 1199,
      "lines": 10,
      "hash": "4fb4ce5fd3165d7f1c7f3f349d2ce4de1e1993c4e6e41a6d6da485931d844b33",
      "mtime": 1757602652.9935205
    },
    {
      "path": ".gitignore",
      "language": "other",
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed",
      "size": 13,
      "lines": 1,
      "hash": "5573b9168caf19028ac7eedcf943999f8d923266ec0c26404ef8f5e566353340",
      "mtime": 1757602652.9937208
    },
    {
      "path": "backend/requirements.txt",
      "language": "other",
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed",
      "size": 111,
      "lines": 10,
      "hash": "5fb86cbc65f9248cb8b5349472eb8db57e28abb8b1502f12f65cd9071124dfa8",
      "mtime": 1757602652.9920504
    },
    {
      "path": "backend/migrate_add_phone.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "sqlite3",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "os",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [
        {
          "name": "migrate",
          "params": [],
          "decorators": [],
          "calls": [
            "exists",
            "print",
            "close",
            "commit",
            "execute",
            "fetchall",
            "cursor",
            "connect",
            "rollback"
          ],
          "sideEffects": [
            "io"
          ]
        }
      ],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "This script is like a construction worker adding a new room to a house\u2014careful planning is essential to ensure everything fits and functions well.",
      "skipped": false,
      "skipReason": null,
      "size": 1080,
      "lines": 37,
      "hash": "ec20a7e980071d7ba9e346feb08dab099b26591fc0225be97315208c020bcbe3",
      "mtime": 1757602652.9932597,
      "summary": {
        "title": "Migration Script for Adding Phone Field",
        "purpose": "This script is designed to modify the database schema by adding a phone number field to an existing table.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "sqlite3",
          "os"
        ],
        "how_to_modify": "To modify this script, you should focus on the database schema changes, specifically where the phone field is being added. Ensure that you understand the existing database structure and how the new field integrates with it.",
        "risks": "Modifying the database schema can lead to data loss or corruption if not done carefully. Ensure you have backups before running the migration. Additionally, if the script is executed in a production environment, it may affect live data.",
        "blurb": "This script is like a construction worker adding a new room to a house\u2014careful planning is essential to ensure everything fits and functions well.",
        "dev_summary": "This Python script uses sqlite3 to alter a database schema by adding a phone field. It has no defined functions or classes, and it relies on external libraries for database operations.",
        "vibecoder_summary": "Imagine you're a wizard casting a spell to add a new magical phone booth to your enchanted castle. This script helps you make that happen, but be careful not to accidentally turn your castle into a pumpkin!",
        "edit_points": []
      }
    },
    {
      "path": "backend/app/config.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "__future__",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "pydantic_settings",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "pydantic",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "Settings",
          "methods": [
            "_normalize_storage_dir",
            "_normalize_base_url",
            "_normalize_origins"
          ],
          "baseClasses": [
            "BaseSettings"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the blueprint for your app's settings, ensuring everything runs smoothly and correctly.",
      "skipped": false,
      "skipReason": null,
      "size": 1576,
      "lines": 55,
      "hash": "cbb864dc6dcee04167cf7e0f997b612c417bdbd74dbbc84b6551b179a286c9ad",
      "mtime": 1757602652.97321,
      "summary": {
        "title": "Configuration Management",
        "purpose": "This file manages application configuration settings using Pydantic for validation and type safety.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "__future__",
          "typing",
          "pydantic_settings",
          "pydantic"
        ],
        "how_to_modify": "To modify configuration settings, update the Pydantic model definitions or add new settings as needed. Ensure that any new settings are validated properly.",
        "risks": "Improper modifications may lead to runtime errors or misconfigurations. Be cautious with data types and validation rules.",
        "blurb": "Think of this file as the blueprint for your app's settings, ensuring everything runs smoothly and correctly.",
        "dev_summary": "Handles application configuration using Pydantic for type validation. No functions or classes are defined here; focus on constants and settings.",
        "vibecoder_summary": "Imagine this file as the recipe book for your app, listing all the ingredients (settings) it needs to bake perfectly. If you change an ingredient without knowing how it affects the cake, it might not rise!",
        "edit_points": []
      }
    },
    {
      "path": "backend/app/database.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "sqlalchemy",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "sqlalchemy.ext.declarative",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "sqlalchemy.orm",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "config",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [
        {
          "name": "get_db",
          "params": [],
          "decorators": [],
          "calls": [
            "close",
            "SessionLocal"
          ],
          "sideEffects": [
            "db"
          ]
        }
      ],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the blueprint for your database. It tells your application how to interact with the data stored in your database, like a map guiding you through a city.",
      "skipped": false,
      "skipReason": null,
      "size": 504,
      "lines": 19,
      "hash": "494ec199f75fda59a9ec46565b224649487aa7a6420dbf430e8852c06e3232e2",
      "mtime": 1757602652.9734,
      "summary": {
        "title": "Database Module",
        "purpose": "This module is responsible for setting up the database connection and defining the ORM models using SQLAlchemy.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "sqlalchemy",
          "sqlalchemy.ext.declarative",
          "sqlalchemy.orm",
          "config"
        ],
        "how_to_modify": "To modify this file, you can add or update ORM model definitions, configure database settings, or adjust connection parameters. Ensure that any changes align with the existing database schema.",
        "risks": "Modifying the database connection settings or ORM models can lead to data integrity issues, broken queries, or application crashes if not done carefully. Always back up the database before making changes.",
        "blurb": "Think of this file as the blueprint for your database. It tells your application how to interact with the data stored in your database, like a map guiding you through a city.",
        "dev_summary": "This module sets up SQLAlchemy for ORM usage. It defines models and manages database connections. Be cautious with schema changes and ensure compatibility with existing data.",
        "vibecoder_summary": "Imagine this file as a magical library where all your data books are kept. Each book (model) has its own story (structure) and the librarian (SQLAlchemy) knows exactly how to fetch them when you ask. Just be careful not to misplace any books or change their stories without a plan!",
        "edit_points": "Focus on adding new classes for ORM models or modifying existing ones. Pay attention to the database connection settings if changes are needed."
      }
    },
    {
      "path": "backend/app/__init__.py",
      "language": "py",
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the welcome mat for your backend app. It sets the stage for everything that comes next!",
      "skipped": false,
      "skipReason": null,
      "size": 0,
      "lines": 0,
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "mtime": 1757602652.9735327,
      "summary": {
        "title": "__init__.py in backend/app",
        "purpose": "This file serves as an initializer for the backend application, allowing Python to recognize the directory as a package.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [],
        "how_to_modify": "You can add initialization code or package-level documentation. Be cautious not to introduce circular imports.",
        "risks": "Modifying this file incorrectly could lead to import errors or misconfiguration of the application package.",
        "blurb": "Think of this file as the welcome mat for your backend app. It sets the stage for everything that comes next!",
        "dev_summary": "This file initializes the backend application package. It currently has no defined functions or classes. Ensure any changes maintain package integrity.",
        "vibecoder_summary": "Imagine this file as the front door to a cozy caf\u00e9. It welcomes guests (modules) and makes sure everything inside is ready to serve delicious code!",
        "edit_points": "Consider adding module-level docstrings or import statements if necessary."
      }
    },
    {
      "path": "backend/app/main.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "__future__",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "os",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "fastapi",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "fastapi.middleware.cors",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "fastapi.staticfiles",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "config",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "database",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "routers",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "routers",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "routers",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [
        {
          "name": "healthz",
          "params": [],
          "decorators": [
            "get"
          ],
          "calls": [
            "get"
          ],
          "sideEffects": [
            "io"
          ]
        }
      ],
      "classes": [],
      "routes": [
        {
          "method": "GET",
          "path": "/healthz",
          "handler": "healthz"
        }
      ],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": "fastapi",
        "isRoute": true,
        "isReactComponent": false,
        "isAPI": true
      },
      "warnings": [],
      "blurb": "Think of this file as the conductor of an orchestra, coordinating the various instruments (routes, middleware, and static files) to create a harmonious API experience.",
      "skipped": false,
      "skipReason": null,
      "size": 2035,
      "lines": 60,
      "hash": "4906adc1483052a7e44565e4f910c01a0377fa520f8b80e6a3624f95b48759e5",
      "mtime": 1757602652.9854941,
      "summary": {
        "title": "Main Application Entry Point",
        "purpose": "This file serves as the main entry point for the FastAPI application, configuring routes, middleware, and static file serving.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "__future__",
          "os",
          "fastapi",
          "fastapi.middleware.cors",
          "fastapi.staticfiles",
          "config",
          "database",
          "routers"
        ],
        "how_to_modify": "To modify this file, you can add new routes, configure middleware settings, or adjust static file serving options. Ensure that any new routes are properly linked to the existing router modules.",
        "risks": "Modifying this file without understanding the routing and middleware configurations may lead to broken endpoints or security vulnerabilities. Always test changes in a development environment before deploying.",
        "blurb": "Think of this file as the conductor of an orchestra, coordinating the various instruments (routes, middleware, and static files) to create a harmonious API experience.",
        "dev_summary": "This file initializes the FastAPI app, sets up CORS, serves static files, and includes routers for API endpoints. Be cautious with middleware and routing changes.",
        "vibecoder_summary": "Imagine this file as the captain of a ship, steering through the waters of web requests. It decides which way to go and what sails to raise (routes and middleware) to navigate smoothly.",
        "edit_points": "Focus on adding or modifying route definitions and middleware configurations. Ensure to check the imported routers for existing routes that may need adjustments."
      }
    },
    {
      "path": "backend/app/routers/prospect.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "fastapi",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "sqlalchemy.orm",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "database",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "schemas.prospect",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [
        {
          "name": "create_prospect",
          "params": [
            "payload",
            "db"
          ],
          "decorators": [
            "post"
          ],
          "calls": [
            "str",
            "post",
            "add",
            "commit",
            "strip",
            "Depends",
            "refresh",
            "Prospect"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "list_prospects",
          "params": [
            "db"
          ],
          "decorators": [
            "get"
          ],
          "calls": [
            "order_by",
            "get",
            "desc",
            "Depends",
            "all",
            "query"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "get_prospect",
          "params": [
            "prospect_id",
            "db"
          ],
          "decorators": [
            "get"
          ],
          "calls": [
            "HTTPException",
            "get",
            "Depends",
            "query"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "update_prospect",
          "params": [
            "prospect_id",
            "payload",
            "db"
          ],
          "decorators": [
            "patch"
          ],
          "calls": [
            "str",
            "patch",
            "commit",
            "get",
            "HTTPException",
            "strip",
            "Depends",
            "refresh",
            "query"
          ],
          "sideEffects": [
            "db"
          ]
        }
      ],
      "classes": [],
      "routes": [
        {
          "method": "POST",
          "path": "",
          "handler": "create_prospect"
        },
        {
          "method": "GET",
          "path": "",
          "handler": "list_prospects"
        },
        {
          "method": "GET",
          "path": "/{prospect_id}",
          "handler": "get_prospect"
        },
        {
          "method": "PATCH",
          "path": "/{prospect_id}",
          "handler": "update_prospect"
        }
      ],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": "fastapi",
        "isRoute": true,
        "isReactComponent": false,
        "isAPI": true
      },
      "warnings": [],
      "blurb": "This file is like a traffic controller for prospect data, directing requests to the right handlers and ensuring smooth communication between the client and the database.",
      "skipped": false,
      "skipReason": null,
      "size": 2720,
      "lines": 70,
      "hash": "ca48a74a837a7df257f1fa1c1eef1a9673525bf9c90cddc7b17a8a3f5dea7fbb",
      "mtime": 1757602652.9685793,
      "summary": {
        "title": "Prospect Router",
        "purpose": "Handles API routes related to prospect data management in a FastAPI application.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "fastapi",
          "sqlalchemy.orm",
          "typing",
          "database",
          "schemas.prospect"
        ],
        "how_to_modify": "To add or modify routes, define new functions decorated with FastAPI route decorators (e.g., @app.get, @app.post) and ensure they interact correctly with the database and schemas.",
        "risks": "Improperly defined routes may lead to security vulnerabilities, such as exposing sensitive data or allowing unauthorized access. Ensure to validate inputs and handle exceptions properly.",
        "blurb": "This file is like a traffic controller for prospect data, directing requests to the right handlers and ensuring smooth communication between the client and the database.",
        "dev_summary": "Defines API routes for managing prospects using FastAPI. Ensure to handle database interactions through SQLAlchemy and validate data against defined schemas.",
        "vibecoder_summary": "Imagine this file as a friendly guide, helping users navigate through the world of prospects. It points them to the right paths and makes sure they don\u2019t get lost in the data jungle!",
        "edit_points": "Look for areas where new route functions can be added or existing ones modified. Pay attention to the interaction with the database and schemas to maintain data integrity."
      }
    },
    {
      "path": "backend/app/routers/deck.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "json",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "fastapi",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "sqlalchemy.orm",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "pydantic",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "database",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "models.prospect",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "models.deck",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "schemas.deck",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "services.ai",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "services.pdf",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "services.slides",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "config",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [
        {
          "name": "generate_deck",
          "params": [
            "prospect_id",
            "db"
          ],
          "decorators": [
            "post"
          ],
          "calls": [
            "str",
            "post",
            "generate_deck_content",
            "add",
            "rstrip",
            "dumps",
            "HTTPException",
            "get",
            "commit",
            "Depends",
            "refresh",
            "Deck"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "get_deck",
          "params": [
            "deck_id",
            "db"
          ],
          "decorators": [
            "get"
          ],
          "calls": [
            "rstrip",
            "HTTPException",
            "get",
            "loads",
            "Depends"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "update_deck",
          "params": [
            "deck_id",
            "payload",
            "db"
          ],
          "decorators": [
            "patch"
          ],
          "calls": [
            "dict",
            "add",
            "rstrip",
            "dumps",
            "patch",
            "get",
            "commit",
            "HTTPException",
            "validate_and_normalize_slides",
            "Depends",
            "refresh",
            "_strip_markup",
            "_truncate"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "render_deck",
          "params": [
            "deck_id",
            "db"
          ],
          "decorators": [
            "post"
          ],
          "calls": [
            "str",
            "post",
            "add",
            "rstrip",
            "HTTPException",
            "get",
            "commit",
            "loads",
            "Depends",
            "refresh",
            "render_deck_to_pdf"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "get_slide",
          "params": [
            "deck_id",
            "index",
            "db"
          ],
          "decorators": [
            "get"
          ],
          "calls": [
            "len",
            "HTTPException",
            "get",
            "loads",
            "Depends"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "patch_slide",
          "params": [
            "deck_id",
            "index",
            "patch",
            "db"
          ],
          "decorators": [
            "patch"
          ],
          "calls": [
            "len",
            "add",
            "rstrip",
            "dumps",
            "patch",
            "get",
            "commit",
            "HTTPException",
            "validate_and_normalize_slides",
            "loads",
            "Depends",
            "refresh",
            "update",
            "_strip_markup",
            "_truncate"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "ai_edit_slide",
          "params": [
            "deck_id",
            "index",
            "request",
            "db"
          ],
          "decorators": [
            "post"
          ],
          "calls": [
            "len",
            "post",
            "str",
            "add",
            "rstrip",
            "dumps",
            "HTTPException",
            "get",
            "commit",
            "loads",
            "Depends",
            "refresh",
            "edit_deck_slide_content"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "debug_ai_edit_test",
          "params": [
            "request",
            "db"
          ],
          "decorators": [
            "post"
          ],
          "calls": [
            "str",
            "post",
            "type",
            "get",
            "Depends",
            "edit_deck_slide_content"
          ],
          "sideEffects": [
            "db"
          ]
        }
      ],
      "classes": [
        {
          "name": "SlidePatch",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "SlideAIEditRequest",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        }
      ],
      "routes": [
        {
          "method": "POST",
          "path": "/{prospect_id}/generate",
          "handler": "generate_deck"
        },
        {
          "method": "GET",
          "path": "/{deck_id}",
          "handler": "get_deck"
        },
        {
          "method": "PATCH",
          "path": "/{deck_id}",
          "handler": "update_deck"
        },
        {
          "method": "POST",
          "path": "/{deck_id}/render",
          "handler": "render_deck"
        },
        {
          "method": "GET",
          "path": "/{deck_id}/slides/{index}",
          "handler": "get_slide"
        },
        {
          "method": "PATCH",
          "path": "/{deck_id}/slides/{index}",
          "handler": "patch_slide"
        },
        {
          "method": "POST",
          "path": "/{deck_id}/slides/{index}/ai-edit",
          "handler": "ai_edit_slide"
        },
        {
          "method": "POST",
          "path": "/debug/ai-edit-test",
          "handler": "debug_ai_edit_test"
        }
      ],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [
          "SlidePatch",
          "SlideAIEditRequest"
        ],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": "fastapi",
        "isRoute": true,
        "isReactComponent": false,
        "isAPI": true
      },
      "warnings": [],
      "blurb": "Think of this file as the traffic controller for deck-related requests, guiding them to the right destination and ensuring everything runs smoothly.",
      "skipped": false,
      "skipReason": null,
      "size": 9584,
      "lines": 289,
      "hash": "1f61a967104d1026591bc5495054ef1813c6f26d4eec36f84ab92b80a14f5277",
      "mtime": 1757602652.9691331,
      "summary": {
        "title": "Deck Router",
        "purpose": "This file defines the API routes related to deck management in a FastAPI application, handling requests for creating, reading, updating, and deleting deck resources.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "json",
          "fastapi",
          "sqlalchemy.orm",
          "pydantic",
          "typing",
          "database",
          "models.prospect",
          "models.deck",
          "schemas.deck",
          "services.ai"
        ],
        "how_to_modify": "To modify the API routes, add or update route functions using FastAPI decorators. Ensure that any changes to the data models or schemas are reflected in the corresponding imports and function signatures.",
        "risks": "Modifying the routes without proper validation may lead to broken API endpoints or data inconsistencies. Ensure that changes are tested thoroughly to avoid runtime errors.",
        "blurb": "Think of this file as the traffic controller for deck-related requests, guiding them to the right destination and ensuring everything runs smoothly.",
        "dev_summary": "Defines API routes for deck management in a FastAPI app. Interfaces with SQLAlchemy for database operations and Pydantic for data validation. Be cautious of changes that affect data models or schemas.",
        "vibecoder_summary": "Imagine this file as a friendly librarian who helps you find and manage your decks. You can ask for new decks, update old ones, or even remove them, but be careful not to misplace any books or the library might get confused!",
        "edit_points": []
      }
    },
    {
      "path": "backend/app/routers/__init__.py",
      "language": "py",
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the map for a treasure hunt, guiding requests to the right treasure chests (endpoints) in your application!",
      "skipped": false,
      "skipReason": null,
      "size": 0,
      "lines": 0,
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "mtime": 1757602652.9692736,
      "summary": {
        "title": "Router Initialization Module",
        "purpose": "This module serves as the initialization point for the routing components of the backend application, organizing and managing the routing structure.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [],
        "how_to_modify": "To modify this file, consider adding new route definitions or importing existing route modules. Ensure that any changes maintain the routing structure and do not introduce conflicts.",
        "risks": "Modifying this file without understanding the routing flow may lead to broken routes or inaccessible endpoints. Ensure thorough testing after any changes.",
        "blurb": "Think of this file as the map for a treasure hunt, guiding requests to the right treasure chests (endpoints) in your application!",
        "dev_summary": "This file initializes the routing for the backend application. It currently has no defined functions or classes. Be cautious when adding routes to avoid conflicts.",
        "vibecoder_summary": "Imagine this file as the conductor of an orchestra, making sure every musician (route) knows when to play their part. If you add a new musician, make sure they know the song!",
        "edit_points": []
      }
    },
    {
      "path": "backend/app/routers/email.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "__future__",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "fastapi",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "sqlalchemy.orm",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "pydantic",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "database",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "models.prospect",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "models.email",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "schemas.email",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "services.emailgeneration",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [
        {
          "name": "_to_out",
          "params": [
            "e"
          ],
          "decorators": [],
          "calls": [
            "EmailOut"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "generate_email_sequence",
          "params": [
            "prospect_id",
            "db"
          ],
          "decorators": [
            "post"
          ],
          "calls": [
            "str",
            "delete",
            "post",
            "flush",
            "Email",
            "add",
            "filter",
            "HTTPException",
            "get",
            "commit",
            "Depends",
            "generate_emails",
            "refresh",
            "append",
            "EmailBatchOut",
            "_to_out",
            "query"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "list_emails_for_prospect",
          "params": [
            "prospect_id",
            "db"
          ],
          "decorators": [
            "get"
          ],
          "calls": [
            "order_by",
            "filter",
            "asc",
            "get",
            "Depends",
            "all",
            "EmailBatchOut",
            "_to_out",
            "query"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "get_email",
          "params": [
            "email_id",
            "db"
          ],
          "decorators": [
            "get"
          ],
          "calls": [
            "HTTPException",
            "get",
            "Depends",
            "_to_out"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "update_email",
          "params": [
            "email_id",
            "payload",
            "db"
          ],
          "decorators": [
            "patch"
          ],
          "calls": [
            "add",
            "patch",
            "commit",
            "get",
            "HTTPException",
            "strip",
            "Depends",
            "refresh",
            "_to_out"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "delete_email",
          "params": [
            "email_id",
            "db"
          ],
          "decorators": [
            "delete"
          ],
          "calls": [
            "delete",
            "HTTPException",
            "commit",
            "get",
            "Depends"
          ],
          "sideEffects": [
            "db"
          ]
        },
        {
          "name": "ai_edit_email",
          "params": [
            "email_id",
            "request",
            "db"
          ],
          "decorators": [
            "post"
          ],
          "calls": [
            "str",
            "post",
            "add",
            "HTTPException",
            "commit",
            "get",
            "Depends",
            "refresh",
            "edit_email_content",
            "_to_out"
          ],
          "sideEffects": [
            "db"
          ]
        }
      ],
      "classes": [
        {
          "name": "EmailAIEditRequest",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        }
      ],
      "routes": [
        {
          "method": "POST",
          "path": "/{prospect_id}/generate",
          "handler": "generate_email_sequence"
        },
        {
          "method": "GET",
          "path": "/{prospect_id}",
          "handler": "list_emails_for_prospect"
        },
        {
          "method": "GET",
          "path": "/item/{email_id}",
          "handler": "get_email"
        },
        {
          "method": "PATCH",
          "path": "/item/{email_id}",
          "handler": "update_email"
        },
        {
          "method": "DELETE",
          "path": "/item/{email_id}",
          "handler": "delete_email"
        },
        {
          "method": "POST",
          "path": "/item/{email_id}/ai-edit",
          "handler": "ai_edit_email"
        }
      ],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [
          "EmailAIEditRequest"
        ],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": "fastapi",
        "isRoute": true,
        "isReactComponent": false,
        "isAPI": true
      },
      "warnings": [],
      "blurb": "This file is like a post office for your application, managing how emails are sent and received through various routes.",
      "skipped": false,
      "skipReason": null,
      "size": 5227,
      "lines": 152,
      "hash": "b26f5efdc3fbe70cf60d68f40e46c58b6bb9a2ec797ca070023f1eae1c49884e",
      "mtime": 1757602652.972944,
      "summary": {
        "title": "Email Router",
        "purpose": "Handles email-related API routes for the application using FastAPI.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "__future__",
          "typing",
          "fastapi",
          "sqlalchemy.orm",
          "pydantic",
          "database",
          "models.prospect",
          "models.email",
          "schemas.email",
          "services.emailgeneration"
        ],
        "how_to_modify": "To add or modify email-related routes, locate the appropriate route definitions within this file. Ensure that any changes align with the FastAPI routing conventions and validate input/output using Pydantic schemas.",
        "risks": "Modifying routes without proper validation may lead to unexpected behavior or security vulnerabilities. Ensure that all new routes are tested thoroughly.",
        "blurb": "This file is like a post office for your application, managing how emails are sent and received through various routes.",
        "dev_summary": "Defines API routes for email functionalities using FastAPI. Ensure to validate inputs with Pydantic and manage dependencies correctly.",
        "vibecoder_summary": "Imagine this file as a friendly mailman, delivering messages between your app and the world of emails. It knows all the routes to take and ensures every letter gets to the right place!",
        "edit_points": "Focus on adding new route functions or modifying existing ones. Pay attention to the integration with Pydantic for data validation."
      }
    },
    {
      "path": "backend/app/models/prospect.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "sqlalchemy.orm",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "sqlalchemy",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "datetime",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "database",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "Prospect",
          "methods": [],
          "baseClasses": [
            "Base"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "This file is the blueprint for prospects, detailing how they are structured and interact with the database.",
      "skipped": false,
      "skipReason": null,
      "size": 1132,
      "lines": 31,
      "hash": "176595ef5c6ac9b6af75b3606eec6f61328b2a5fe6af74fbe6dd8ac595f19532",
      "mtime": 1757602652.9740038,
      "summary": {
        "title": "Prospect Model",
        "purpose": "Defines the data structure and behavior for prospects in the application.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "sqlalchemy.orm",
          "sqlalchemy",
          "datetime",
          "database"
        ],
        "how_to_modify": "To modify the prospect model, you can add new attributes to the class or adjust existing ones. Ensure that any changes align with the database schema and update any related queries accordingly.",
        "risks": "Modifying the model without updating the database schema can lead to inconsistencies. Be cautious of breaking existing functionality that relies on the current model structure.",
        "blurb": "This file is the blueprint for prospects, detailing how they are structured and interact with the database.",
        "dev_summary": "Defines the Prospect class for ORM mapping with SQLAlchemy. No functions or constants are defined. Ensure database schema matches model changes.",
        "vibecoder_summary": "Think of this file as a recipe for making prospects. If you want to add a new ingredient (attribute), just make sure it fits with the rest of the dish (database).",
        "edit_points": "Focus on the class definition for adding or modifying attributes related to prospects."
      }
    },
    {
      "path": "backend/app/models/deck.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "sqlalchemy",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "sqlalchemy.orm",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "datetime",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "database",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "Deck",
          "methods": [],
          "baseClasses": [
            "Base"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "The Deck model is like the blueprint for a card deck, helping you manage and interact with your collection of cards in the game.",
      "skipped": false,
      "skipReason": null,
      "size": 746,
      "lines": 18,
      "hash": "fcc46d9ce199d9a3c69d148dee3e31ea0ae6028c25a11e39070d3f5e832ca4b1",
      "mtime": 1757602652.9742877,
      "summary": {
        "title": "Deck Model",
        "purpose": "Defines the Deck model for database interactions, representing a collection of cards in a game.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "sqlalchemy",
          "sqlalchemy.orm",
          "datetime",
          "database"
        ],
        "how_to_modify": "To modify the Deck model, you can add attributes to the class or change existing ones. Ensure that any changes are reflected in the database schema if necessary.",
        "risks": "Modifying the model without updating the database schema can lead to inconsistencies. Be cautious of data integrity and relationships with other models.",
        "blurb": "The Deck model is like the blueprint for a card deck, helping you manage and interact with your collection of cards in the game.",
        "dev_summary": "Defines the Deck class for ORM mapping with SQLAlchemy. No functions or constants are defined yet. Ensure database schema is updated when modifying attributes.",
        "vibecoder_summary": "Imagine the Deck model as a treasure chest that holds all your cards. You can add new cards or change the ones inside, but be careful not to break the lock that keeps it secure!",
        "edit_points": "Look for the Deck class definition in the file to add or modify attributes. Ensure to check for any related database migrations."
      }
    },
    {
      "path": "backend/app/models/__init__.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "prospect",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "deck",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "email",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the front desk of a hotel, where all the guests (models) check in. It keeps everything organized and ensures that the right guests are welcomed into the building.",
      "skipped": false,
      "skipReason": null,
      "size": 79,
      "lines": 3,
      "hash": "1227b3126f772e38b6f0ec4492b9b4cad0583539d5241071f896d1284cf5594d",
      "mtime": 1757602652.974464,
      "summary": {
        "title": "Model Initialization Module",
        "purpose": "This module serves as an initializer for the model components of the backend application, allowing for structured imports and organization of model-related functionalities.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "prospect",
          "deck",
          "email"
        ],
        "how_to_modify": "To modify this file, you can add new model imports or reorganize existing ones. Ensure that any new models are properly defined in their respective files and that they are correctly imported here.",
        "risks": "Improper modifications may lead to import errors or circular dependencies. Ensure that all models are correctly referenced and that any changes do not disrupt the existing structure.",
        "blurb": "Think of this file as the front desk of a hotel, where all the guests (models) check in. It keeps everything organized and ensures that the right guests are welcomed into the building.",
        "dev_summary": "This file initializes model imports for the backend. It currently has no defined functions or classes. Be cautious when adding imports to avoid circular dependencies.",
        "vibecoder_summary": "Imagine this file as a library catalog. It lists all the books (models) available in the library (backend), making it easy to find and check them out. If you want to add a new book, just make sure it\u2019s in the library first!",
        "edit_points": [
          "Add new model imports",
          "Reorganize existing imports"
        ]
      }
    },
    {
      "path": "backend/app/models/email.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "__future__",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "sqlalchemy",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "sqlalchemy.orm",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "database",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "Email",
          "methods": [],
          "baseClasses": [
            "Base"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "This file is the blueprint for how emails are stored and managed in our app. Think of it as the recipe that tells the kitchen how to prepare the dish!",
      "skipped": false,
      "skipReason": null,
      "size": 837,
      "lines": 22,
      "hash": "db8a0e8a68f33c457781dad205a8a412b767c0687acbc0cf0e0f4ef48d2d9bb6",
      "mtime": 1757602652.978277,
      "summary": {
        "title": "Email Model",
        "purpose": "Defines the structure and behavior of email-related data in the application.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "__future__",
          "sqlalchemy",
          "sqlalchemy.orm",
          "database"
        ],
        "how_to_modify": "To modify this file, consider adding new fields to the email model or updating validation logic. Ensure that any changes align with the database schema and ORM mappings.",
        "risks": "Modifying the email model may lead to inconsistencies with the database if migrations are not handled properly. Additionally, changes could affect other parts of the application that rely on this model.",
        "blurb": "This file is the blueprint for how emails are stored and managed in our app. Think of it as the recipe that tells the kitchen how to prepare the dish!",
        "dev_summary": "Defines the email model using SQLAlchemy ORM. No functions or classes are defined yet. Ensure database migrations are in sync with any changes.",
        "vibecoder_summary": "Imagine this file as a treasure map that guides you to the hidden gems of email data! You can add new treasures (fields) or change the way we find them, but be careful not to lose the map's accuracy!",
        "edit_points": "Look for areas where you can define new attributes or validation rules for the email model. Pay attention to how these changes might affect the database and other components."
      }
    },
    {
      "path": "backend/app/schemas/prospect.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "pydantic",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "ProspectCreate",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "ProspectUpdate",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "ProspectOut",
          "methods": [],
          "baseClasses": [
            "ProspectCreate"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [
          "ProspectCreate",
          "ProspectUpdate"
        ],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "This file is like a blueprint for prospects, ensuring that all the necessary information is captured and validated before it gets used in the application.",
      "skipped": false,
      "skipReason": null,
      "size": 962,
      "lines": 32,
      "hash": "1c331803936593e138bf3a4d7eba31bd9de510a7677a52433f832b9e4e2480c1",
      "mtime": 1757602652.9817936,
      "summary": {
        "title": "Prospect Schema Definition",
        "purpose": "Defines data validation and serialization for prospect-related data using Pydantic.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "pydantic",
          "typing"
        ],
        "how_to_modify": "To modify the schema, add or update Pydantic model fields to reflect the desired data structure for prospects. Ensure that types are correctly specified using Python's typing module.",
        "risks": "Incorrect field definitions may lead to data validation errors, which could cause downstream failures in data processing or API responses. Be cautious when changing field types or removing fields.",
        "blurb": "This file is like a blueprint for prospects, ensuring that all the necessary information is captured and validated before it gets used in the application.",
        "dev_summary": "Defines Pydantic models for prospect data validation. No functions or classes are defined yet, but it serves as a foundational schema. Ensure to maintain type integrity when modifying.",
        "vibecoder_summary": "Imagine this file as a recipe for making the perfect prospect cake. It lists all the ingredients (data fields) and their measurements (types) to ensure every cake turns out just right!",
        "edit_points": "Focus on adding fields to the Pydantic model or adjusting existing field types. Review the Pydantic documentation for best practices on defining models."
      }
    },
    {
      "path": "backend/app/schemas/deck.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "__future__",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "pydantic",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "Slide",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "DeckOut",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "SlideIn",
          "methods": [
            "_ensure_list"
          ],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "DeckUpdate",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [
          "Slide",
          "DeckOut",
          "SlideIn",
          "DeckUpdate"
        ],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "This file is like a blueprint for decks, ensuring that all deck data is structured and validated correctly before use.",
      "skipped": false,
      "skipReason": null,
      "size": 764,
      "lines": 34,
      "hash": "11ad39922f476b0e3cf4f20d2c66055bbbe9c3825e097ff8e592285e6a47d6a1",
      "mtime": 1757602652.9819784,
      "summary": {
        "title": "Deck Schema Definition",
        "purpose": "Defines data structures and validation rules for deck-related entities using Pydantic.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "__future__",
          "typing",
          "pydantic"
        ],
        "how_to_modify": "To modify the schema, add or update Pydantic models or fields that represent deck attributes. Ensure to maintain validation rules and types.",
        "risks": "Incorrect modifications may lead to data validation errors or runtime exceptions. Changes to field types or required fields can break existing functionality.",
        "blurb": "This file is like a blueprint for decks, ensuring that all deck data is structured and validated correctly before use.",
        "dev_summary": "Defines Pydantic models for deck data validation. No functions or classes are defined directly; relies on Pydantic's features. Be cautious with type changes.",
        "vibecoder_summary": "Imagine this file as a recipe book for decks, where each recipe (model) must have the right ingredients (fields) and measurements (types) to bake the perfect deck!",
        "edit_points": "Focus on adding or modifying Pydantic models and their fields to adjust how deck data is structured and validated."
      }
    },
    {
      "path": "backend/app/schemas/__init__.py",
      "language": "py",
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the front door to a library of schemas, where you can add new books (schemas) or organize existing ones. Just be careful not to misplace them!",
      "skipped": false,
      "skipReason": null,
      "size": 0,
      "lines": 0,
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "mtime": 1757602652.9821115,
      "summary": {
        "title": "__init__.py in backend/app/schemas",
        "purpose": "This file serves as an initializer for the schemas module in the backend application, allowing for the organization and management of schema definitions.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [],
        "how_to_modify": "You can add new schema definitions or import existing ones into this file. Ensure that any new schemas are properly defined and follow the conventions used in the project.",
        "risks": "Modifying this file without understanding the existing schema structure may lead to inconsistencies or errors in data validation across the application.",
        "blurb": "Think of this file as the front door to a library of schemas, where you can add new books (schemas) or organize existing ones. Just be careful not to misplace them!",
        "dev_summary": "This file initializes the schemas module. It currently has no defined functions or classes. Be cautious when adding new schemas to maintain consistency.",
        "vibecoder_summary": "Imagine this file as a blank canvas waiting for you to paint your schema masterpieces. Just remember, every stroke counts, so make sure your art fits the gallery's theme!",
        "edit_points": "Consider adding schema definitions or importing existing schemas. Ensure to maintain the structure and naming conventions used in the project."
      }
    },
    {
      "path": "backend/app/schemas/email.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "__future__",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "pydantic",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [],
      "classes": [
        {
          "name": "EmailOut",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "EmailIn",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "EmailUpdate",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "EmailBatchOut",
          "methods": [],
          "baseClasses": [
            "BaseModel"
          ]
        },
        {
          "name": "ProspectContext",
          "methods": [
            "coerce_str"
          ],
          "baseClasses": [
            "BaseModel"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [
          "EmailOut",
          "EmailIn",
          "EmailUpdate",
          "EmailBatchOut",
          "ProspectContext"
        ],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "This file is like a blueprint for emails, ensuring that all email data is structured and validated correctly before being used in the application.",
      "skipped": false,
      "skipReason": null,
      "size": 908,
      "lines": 36,
      "hash": "7443c066e636f4b6402df071b87eaa36c73b2010634d0616f8135fb7f41e12d8",
      "mtime": 1757602652.9849823,
      "summary": {
        "title": "Email Schema Definition",
        "purpose": "Defines data structures and validation for email-related data using Pydantic.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "__future__",
          "typing",
          "pydantic"
        ],
        "how_to_modify": "To modify the email schema, add or change Pydantic models or fields to reflect the desired email data structure. Ensure that any changes maintain data validation rules.",
        "risks": "Modifying the schema incorrectly may lead to validation errors or data integrity issues. Ensure that any changes are tested thoroughly.",
        "blurb": "This file is like a blueprint for emails, ensuring that all email data is structured and validated correctly before being used in the application.",
        "dev_summary": "Defines Pydantic models for email data validation. No functions or classes are defined directly in this file. Be cautious with changes to maintain data integrity.",
        "vibecoder_summary": "Imagine this file as a recipe for baking the perfect email! It lists all the ingredients (data fields) and how to mix them (validation rules) to ensure every email is just right.",
        "edit_points": "Look for areas where Pydantic models are defined or where new fields can be added to enhance email validation."
      }
    },
    {
      "path": "backend/app/templates/deck.html",
      "language": "other",
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed",
      "size": 3833,
      "lines": 155,
      "hash": "002ca261b89b7f2f890f4638dd3dd7baaecc5f1a9017bc79ca477f6a35151740",
      "mtime": 1757602652.9853106
    },
    {
      "path": "backend/app/services/emailgeneration.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "__future__",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "json",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "logging",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "config",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [
        {
          "name": "_openai_json_response",
          "params": [
            "prompt"
          ],
          "decorators": [],
          "calls": [
            "_stub_response",
            "create",
            "loads",
            "EmailAIUnavailableError",
            "OpenAI",
            "info"
          ],
          "sideEffects": [
            "io"
          ]
        },
        {
          "name": "_stub_response",
          "params": [
            "prompt"
          ],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "io"
          ]
        },
        {
          "name": "_coalesce",
          "params": [
            "v",
            "default"
          ],
          "decorators": [],
          "calls": [
            "strip",
            "isinstance"
          ],
          "sideEffects": [
            "io"
          ]
        },
        {
          "name": "generate_emails",
          "params": [
            "prospect"
          ],
          "decorators": [],
          "calls": [
            "EmailAIFormatError",
            "dumps",
            "strip",
            "_openai_json_response",
            "get",
            "append",
            "_coalesce",
            "replace"
          ],
          "sideEffects": [
            "io"
          ]
        }
      ],
      "classes": [
        {
          "name": "EmailAIUnavailableError",
          "methods": [],
          "baseClasses": [
            "Exception"
          ]
        },
        {
          "name": "EmailAIFormatError",
          "methods": [],
          "baseClasses": [
            "Exception"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this module as the email chef in a restaurant, whipping up delicious messages to serve to your users. Just like a chef needs the right ingredients and recipes, this module needs the right cod",
      "skipped": false,
      "skipReason": null,
      "size": 7608,
      "lines": 160,
      "hash": "fa3e25cac6cce7fb36098a3d733432c7054960d4d853d3654d47cc69f7108225",
      "mtime": 1757602652.9858627,
      "summary": {
        "title": "Email Generation Service",
        "purpose": "This module is responsible for generating and formatting email content for various notifications and communications within the application.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "__future__",
          "json",
          "logging",
          "typing",
          "config"
        ],
        "how_to_modify": "To modify the email generation logic, locate the relevant functions or classes that handle email formatting and content generation. Ensure to follow the existing structure and conventions used in the module.",
        "risks": "Changes to the email content or formatting may lead to incorrect or malformed emails being sent. Additionally, improper handling of dependencies could introduce bugs or affect logging functionality.",
        "blurb": "Think of this module as the email chef in a restaurant, whipping up delicious messages to serve to your users. Just like a chef needs the right ingredients and recipes, this module needs the right code and configurations to create the perfect email.",
        "dev_summary": "Handles email content generation. Interfaces with JSON for data formatting and logging for error tracking. Be cautious with changes to ensure email integrity.",
        "vibecoder_summary": "Imagine a magical kitchen where emails are cooked up! This module is the chef, mixing ingredients (data) and following recipes (code) to create tasty emails for everyone. Just make sure the chef doesn\u2019t spill anything or forget an ingredient!",
        "edit_points": []
      }
    },
    {
      "path": "backend/app/services/ai.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "__future__",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "json",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "logging",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "config",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [
        {
          "name": "_strip_markup",
          "params": [
            "text"
          ],
          "decorators": [],
          "calls": [
            "str",
            "strip",
            "sub"
          ],
          "sideEffects": []
        },
        {
          "name": "_truncate",
          "params": [
            "text",
            "max_chars"
          ],
          "decorators": [],
          "calls": [
            "len",
            "strip",
            "rstrip"
          ],
          "sideEffects": []
        },
        {
          "name": "_coerce_bullets",
          "params": [
            "value"
          ],
          "decorators": [],
          "calls": [
            "split",
            "isinstance",
            "strip",
            "append",
            "_strip_markup",
            "_truncate"
          ],
          "sideEffects": []
        },
        {
          "name": "_normalize_deck_obj",
          "params": [
            "obj"
          ],
          "decorators": [],
          "calls": [
            "isinstance",
            "get",
            "_coerce_bullets",
            "append",
            "_strip_markup",
            "_truncate"
          ],
          "sideEffects": []
        },
        {
          "name": "_openai_json_response",
          "params": [
            "prompt"
          ],
          "decorators": [],
          "calls": [
            "create",
            "getattr",
            "loads",
            "AIUnavailableError",
            "OpenAI",
            "info"
          ],
          "sideEffects": []
        },
        {
          "name": "generate_deck_content",
          "params": [
            "prospect"
          ],
          "decorators": [],
          "calls": [
            "_normalize_deck_obj",
            "dumps",
            "_openai_json_response",
            "strip",
            "get",
            "enumerate"
          ],
          "sideEffects": []
        },
        {
          "name": "edit_deck_slide_content",
          "params": [
            "current_slide",
            "user_prompt",
            "prospect",
            "slide_index"
          ],
          "decorators": [],
          "calls": [
            "len",
            "isinstance",
            "dumps",
            "error",
            "get",
            "_openai_json_response",
            "AIFormatError",
            "_coerce_bullets",
            "_strip_markup",
            "_truncate"
          ],
          "sideEffects": []
        },
        {
          "name": "edit_email_content",
          "params": [
            "current_subject",
            "current_body",
            "user_prompt",
            "prospect",
            "sequence_index"
          ],
          "decorators": [],
          "calls": [
            "isinstance",
            "dumps",
            "error",
            "_openai_json_response",
            "strip",
            "AIFormatError",
            "get",
            "_strip_markup",
            "_truncate"
          ],
          "sideEffects": []
        }
      ],
      "classes": [
        {
          "name": "AIUnavailableError",
          "methods": [],
          "baseClasses": [
            "Exception"
          ]
        },
        {
          "name": "AIFormatError",
          "methods": [],
          "baseClasses": [
            "Exception"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this module as the brain of your application, where all the smart decisions are made. Tread carefully when making changes, as you wouldn't want to confuse the brain!",
      "skipped": false,
      "skipReason": null,
      "size": 18481,
      "lines": 336,
      "hash": "bf03ff017ca2df9c5f60b59e11f85618bf5dc9715f5cca5244dd7f6296d373a7",
      "mtime": 1757602652.9863427,
      "summary": {
        "title": "AI Service Module",
        "purpose": "This module is designed to provide AI-related functionalities, such as processing data and interfacing with AI models.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "__future__",
          "json",
          "logging",
          "typing",
          "config"
        ],
        "how_to_modify": "To modify this module, focus on adding new AI-related functions or enhancing existing logic. Ensure to follow the typing conventions and logging practices established in the module.",
        "risks": "Modifying this module without understanding the AI logic could lead to incorrect data processing or failures in AI model interactions. Additionally, changes to logging may obscure important runtime information.",
        "blurb": "Think of this module as the brain of your application, where all the smart decisions are made. Tread carefully when making changes, as you wouldn't want to confuse the brain!",
        "dev_summary": "Handles AI functionalities with no defined classes or functions yet. Uses standard libraries for JSON handling, logging, and type hints. Ensure to maintain type safety and logging consistency.",
        "vibecoder_summary": "Imagine this file as a wizard's spellbook, waiting for new spells (functions) to be added. Each spell needs to be crafted carefully, or the magic might go awry!",
        "edit_points": []
      }
    },
    {
      "path": "backend/app/services/__init__.py",
      "language": "py",
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the welcome mat for all your backend services. It sets the stage for everything that happens behind the scenes.",
      "skipped": false,
      "skipReason": null,
      "size": 0,
      "lines": 0,
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "mtime": 1757602652.9864764,
      "summary": {
        "title": "Service Initialization Module",
        "purpose": "This module serves as an initializer for the services in the backend application, allowing for the organization and management of service-related functionalities.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [],
        "how_to_modify": "You can add new service-related functionalities or reorganize existing ones within this module. Ensure that any new services are properly imported and initialized.",
        "risks": "Modifying this file without understanding the overall service architecture may lead to broken service functionalities or initialization issues. Always test after making changes.",
        "blurb": "Think of this file as the welcome mat for all your backend services. It sets the stage for everything that happens behind the scenes.",
        "dev_summary": "This is an empty initialization file for backend services. It currently contains no functions or classes. Be cautious when adding new code to maintain the structure.",
        "vibecoder_summary": "Imagine this file as the blank canvas of a painter. It's waiting for you to splash some colors (or code) on it, but be careful not to spill outside the lines!",
        "edit_points": []
      }
    },
    {
      "path": "backend/app/services/pdf.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "__future__",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "os",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "jinja2",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "weasyprint",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "config",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "utils",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [
        {
          "name": "_resolve_generated_dir",
          "params": [],
          "decorators": [],
          "calls": [
            "join",
            "abspath",
            "isabs",
            "rstrip"
          ],
          "sideEffects": [
            "io"
          ]
        },
        {
          "name": "render_deck_to_pdf",
          "params": [
            "slides",
            "deck_title",
            "out_dir"
          ],
          "decorators": [],
          "calls": [
            "exists",
            "makedirs",
            "RenderError",
            "slugify",
            "write_pdf",
            "get_template",
            "render",
            "TemplateError",
            "join",
            "HTML",
            "FileIOError",
            "_resolve_generated_dir"
          ],
          "sideEffects": [
            "io"
          ]
        }
      ],
      "classes": [
        {
          "name": "TemplateError",
          "methods": [],
          "baseClasses": [
            "Exception"
          ]
        },
        {
          "name": "RenderError",
          "methods": [],
          "baseClasses": [
            "Exception"
          ]
        },
        {
          "name": "FileIOError",
          "methods": [],
          "baseClasses": [
            "Exception"
          ]
        }
      ],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "This module is like a digital printer that takes your data and templates, and magically transforms them into beautifully formatted PDF documents.",
      "skipped": false,
      "skipReason": null,
      "size": 2704,
      "lines": 67,
      "hash": "c3ff6c6a7928b4f2be0343fe8922b60ed6361ff79a4d67bc977ae2f75e280cf7",
      "mtime": 1757602652.9869127,
      "summary": {
        "title": "PDF Service Module",
        "purpose": "This module is responsible for generating PDF documents using templates and data provided by other parts of the application.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "__future__",
          "os",
          "typing",
          "jinja2",
          "weasyprint",
          "config",
          "utils"
        ],
        "how_to_modify": "To modify the PDF generation logic, look for functions that utilize Jinja2 templates and WeasyPrint for rendering. Ensure that any changes to templates are reflected in the corresponding Jinja2 files.",
        "risks": "Modifying the PDF generation logic may lead to incorrect document formatting or data representation. Ensure thorough testing after changes to avoid breaking the PDF output.",
        "blurb": "This module is like a digital printer that takes your data and templates, and magically transforms them into beautifully formatted PDF documents.",
        "dev_summary": "Handles PDF generation using Jinja2 templates and WeasyPrint. No defined functions or classes are present, but relies on external libraries for rendering. Be cautious with template changes.",
        "vibecoder_summary": "Imagine a chef (this module) who takes a recipe (template) and ingredients (data) to whip up a delicious dish (PDF). If you change the recipe, make sure it still tastes good!",
        "edit_points": "Focus on areas where templates are loaded and rendered, particularly any references to Jinja2 and WeasyPrint. Check for any configuration settings that might affect output."
      }
    },
    {
      "path": "backend/app/services/utils.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "re",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "unicodedata",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "datetime",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [
        {
          "name": "slugify",
          "params": [
            "value"
          ],
          "decorators": [],
          "calls": [
            "decode",
            "sub",
            "encode",
            "normalize",
            "strip",
            "lower"
          ],
          "sideEffects": []
        },
        {
          "name": "now_iso",
          "params": [],
          "decorators": [],
          "calls": [
            "utcnow",
            "isoformat"
          ],
          "sideEffects": []
        }
      ],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as a toolbox filled with handy tools that help the backend do its job more efficiently. Each tool is a function waiting to be used!",
      "skipped": false,
      "skipReason": null,
      "size": 371,
      "lines": 11,
      "hash": "edbcd5a30fcf2dfc317dadfd40b1016382beafb47ece5c72dfb992df6271d3a9",
      "mtime": 1757602652.9916787,
      "summary": {
        "title": "Utility Functions for Backend Services",
        "purpose": "This file contains utility functions that provide common functionalities used across various backend services.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "re",
          "unicodedata",
          "datetime"
        ],
        "how_to_modify": "You can add new utility functions or modify existing ones to enhance functionality. Ensure that any new functions are well-documented and tested.",
        "risks": "Modifying utility functions may lead to unexpected behavior in other parts of the application that rely on these utilities. Ensure thorough testing after changes.",
        "blurb": "Think of this file as a toolbox filled with handy tools that help the backend do its job more efficiently. Each tool is a function waiting to be used!",
        "dev_summary": "Contains utility functions for backend services. No defined functions or classes yet. Be cautious when adding or modifying functions as they may affect multiple services.",
        "vibecoder_summary": "Imagine this file as a magical toolbox where you can create and store spells (functions) that help your backend wizards (services) perform their tasks better. Just be careful not to mix up the potions!",
        "edit_points": "Look for areas in the file where you can define new functions or enhance existing ones. Ensure to maintain clarity and consistency in naming and documentation."
      }
    },
    {
      "path": "backend/app/services/slides.py",
      "language": "py",
      "exports": [],
      "imports": [
        {
          "raw": "typing",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "re",
          "resolved": null,
          "external": true,
          "kind": "py"
        },
        {
          "raw": "config",
          "resolved": null,
          "external": true,
          "kind": "py"
        }
      ],
      "functions": [
        {
          "name": "_strip_markup",
          "params": [
            "text"
          ],
          "decorators": [],
          "calls": [
            "str",
            "strip",
            "sub"
          ],
          "sideEffects": []
        },
        {
          "name": "_truncate",
          "params": [
            "text",
            "max_chars"
          ],
          "decorators": [],
          "calls": [
            "len",
            "strip",
            "rstrip"
          ],
          "sideEffects": []
        },
        {
          "name": "validate_and_normalize_slides",
          "params": [
            "slides"
          ],
          "decorators": [],
          "calls": [
            "isinstance",
            "get",
            "append",
            "_strip_markup",
            "_truncate"
          ],
          "sideEffects": []
        }
      ],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the backstage crew for a presentation. It manages the slides, ensuring everything is in order before the show starts.",
      "skipped": false,
      "skipReason": null,
      "size": 1270,
      "lines": 31,
      "hash": "04971e88d1d8e07fd8c571b74af1f2de600e618a39b9b43a1c1b6c6582048eed",
      "mtime": 1757602652.991871,
      "summary": {
        "title": "Slides Service",
        "purpose": "This module is responsible for handling operations related to slides, such as creating, updating, and managing slide data.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "typing",
          "re",
          "config"
        ],
        "how_to_modify": "To modify this file, consider adding new functions or classes that implement slide-related logic. Ensure to import any necessary modules from external dependencies.",
        "risks": "Modifying this file without understanding the overall architecture may lead to broken functionality in slide management. Be cautious of how changes might affect data integrity and interactions with other services.",
        "blurb": "Think of this file as the backstage crew for a presentation. It manages the slides, ensuring everything is in order before the show starts.",
        "dev_summary": "Handles slide operations; currently lacks defined functions or classes. Ensure to manage dependencies correctly when adding functionality.",
        "vibecoder_summary": "Imagine this file as a librarian for your slides, quietly organizing and managing them so they\u2019re ready for the big presentation. If you want to add a new book (function), just make sure it fits on the shelf (follows the structure)!",
        "edit_points": "Look for areas where you can introduce new functions or classes to enhance slide management. Pay attention to how these changes interact with the existing structure."
      }
    },
    {
      "path": "backend/static/init",
      "language": "other",
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed",
      "size": 0,
      "lines": 0,
      "hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      "mtime": 1757602652.9923244
    },
    {
      "path": "offdeal-frontend/postcss.config.mjs",
      "language": "js",
      "exports": [
        "default"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as a recipe book for your CSS. It tells PostCSS how to mix and match ingredients (plugins) to create the perfect style dish for your web application.",
      "skipped": false,
      "skipReason": null,
      "size": 81,
      "lines": 5,
      "hash": "141ef24ca27a99d08962210fdf20212d3435fdcfa21b46cd88b44d22f751dfae",
      "mtime": 1757602652.9942527,
      "summary": {
        "title": "PostCSS Configuration",
        "purpose": "This file configures PostCSS, a tool for transforming CSS with JavaScript plugins, allowing for advanced CSS features and optimizations.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [],
        "how_to_modify": "To modify this file, you can add or remove PostCSS plugins in the configuration object. Ensure that any new plugins are installed as dependencies in your project.",
        "risks": "Incorrect configuration or incompatible plugins may lead to build failures or unexpected CSS output. Always test your CSS after making changes.",
        "blurb": "Think of this file as a recipe book for your CSS. It tells PostCSS how to mix and match ingredients (plugins) to create the perfect style dish for your web application.",
        "dev_summary": "Configures PostCSS for CSS transformations. No functions or classes defined. Ensure plugins are compatible.",
        "vibecoder_summary": "Imagine you're a chef in a kitchen full of spices (plugins). This file is your cookbook, guiding you on how to blend those spices to whip up a delicious CSS feast!",
        "edit_points": "Look for the section where plugins are defined. This is where you can add or remove plugins to customize your CSS processing."
      }
    },
    {
      "path": "offdeal-frontend/next-env.d.ts",
      "language": "ts",
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as a map that helps TypeScript navigate the Next.js landscape, ensuring you don't get lost in the code!",
      "skipped": false,
      "skipReason": null,
      "size": 211,
      "lines": 5,
      "hash": "f2b3bca04d1bfe583daae1e1f798c92ec24bb6693bd88d0a09ba6802dee362a8",
      "mtime": 1757602652.9947195,
      "summary": {
        "title": "TypeScript Environment Definitions",
        "purpose": "This file provides TypeScript definitions for the Next.js environment, ensuring type safety and IntelliSense support for Next.js features.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [],
        "how_to_modify": "You can add or modify type definitions related to the Next.js environment. Ensure that any changes maintain compatibility with the existing TypeScript setup.",
        "risks": "Incorrect modifications may lead to type errors or loss of IntelliSense support in your development environment. Always validate changes with TypeScript compiler checks.",
        "blurb": "Think of this file as a map that helps TypeScript navigate the Next.js landscape, ensuring you don't get lost in the code!",
        "dev_summary": "Defines TypeScript types for Next.js environment. No functions or classes present. Be cautious with changes to avoid type conflicts.",
        "vibecoder_summary": "Imagine this file as a friendly guidebook for TypeScript, helping it understand the magical world of Next.js! If you change the guidebook, make sure the directions still make sense!",
        "edit_points": []
      }
    },
    {
      "path": "offdeal-frontend/README.md",
      "language": "other",
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed",
      "size": 1450,
      "lines": 36,
      "hash": "60b55ff7df79af72590f9524208e46642bc32bdc175cdad41349681c0e2f958f",
      "mtime": 1757602652.99492
    },
    {
      "path": "offdeal-frontend/.gitignore",
      "language": "other",
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed",
      "size": 480,
      "lines": 41,
      "hash": "207e265ff4901f9ad9f96d8ce08530e04f9fc600815472a66d0a446096d654cd",
      "mtime": 1757602652.9955177
    },
    {
      "path": "offdeal-frontend/package-lock.json",
      "language": "other",
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed",
      "size": 221925,
      "lines": 6396,
      "hash": "361a9647191c33c655ea1de154a8e09d854c0d3d388926b743e8b756d89c9977",
      "mtime": 1757602652.9961812
    },
    {
      "path": "offdeal-frontend/package.json",
      "language": "other",
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed",
      "size": 669,
      "lines": 30,
      "hash": "59371dfe34a04f59fef0c99ea76bee866dd8ccb764358e84bb17d2234fcd7258",
      "mtime": 1757602652.996597
    },
    {
      "path": "offdeal-frontend/tsconfig.json",
      "language": "other",
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed",
      "size": 602,
      "lines": 27,
      "hash": "83d292a6930a317ea31ef48e220097d2ca10c6c505f41d5954795acef48ca3b9",
      "mtime": 1757602652.9967892
    },
    {
      "path": "offdeal-frontend/eslint.config.mjs",
      "language": "js",
      "exports": [
        "default"
      ],
      "imports": [
        {
          "raw": "path",
          "kind": "esm"
        },
        {
          "raw": "url",
          "kind": "esm"
        },
        {
          "raw": "@eslint/eslintrc",
          "kind": "esm"
        }
      ],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the rulebook for your coding team, ensuring everyone plays by the same guidelines and keeps the code neat and tidy.",
      "skipped": false,
      "skipReason": null,
      "size": 393,
      "lines": 16,
      "hash": "3de4ba23ff1f687685651cad622700613998de80daa30ac4d82c47776a04019d",
      "mtime": 1757602652.996972,
      "summary": {
        "title": "ESLint Configuration",
        "purpose": "This file configures ESLint, a tool for identifying and fixing problems in JavaScript code, ensuring code quality and consistency across the project.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "path",
          "url",
          "@eslint/eslintrc"
        ],
        "how_to_modify": "To modify the ESLint rules or settings, edit the configuration object within this file. You can add or remove rules as needed to fit your coding standards.",
        "risks": "Improper modifications may lead to incorrect linting results, causing potential issues in code quality or introducing inconsistencies in the codebase.",
        "blurb": "Think of this file as the rulebook for your coding team, ensuring everyone plays by the same guidelines and keeps the code neat and tidy.",
        "dev_summary": "Configures ESLint with specified rules and settings. No functions or classes are defined here. Ensure to validate changes to avoid linting errors.",
        "vibecoder_summary": "Imagine this file as a wise librarian, keeping all the books (code) in perfect order. If you change the rules of the library, make sure they still help everyone find their way around!",
        "edit_points": "Focus on the configuration object to adjust linting rules. Look for sections labeled with comments for guidance on what each rule does."
      }
    },
    {
      "path": "offdeal-frontend/next.config.ts",
      "language": "ts",
      "exports": [
        "default"
      ],
      "imports": [
        {
          "raw": "next",
          "kind": "esm"
        }
      ],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the control panel for your Next.js spaceship, where you set the course for your journey through the web universe!",
      "skipped": false,
      "skipReason": null,
      "size": 133,
      "lines": 7,
      "hash": "614bce25b089c3f19b1e17a6346c74b858034040154c6621e7d35303004767cc",
      "mtime": 1757602652.9971485,
      "summary": {
        "title": "Next.js Configuration File",
        "purpose": "This file configures the Next.js application, setting various options that affect the build and runtime behavior of the app.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "next"
        ],
        "how_to_modify": "To modify the configuration, add or update properties in the exported configuration object. Ensure you understand the implications of each setting by consulting the Next.js documentation.",
        "risks": "Incorrect modifications can lead to build failures or unexpected behavior in the application. Always test changes in a development environment before deploying.",
        "blurb": "Think of this file as the control panel for your Next.js spaceship, where you set the course for your journey through the web universe!",
        "dev_summary": "Configures Next.js settings. No functions or classes defined. Be cautious with changes to avoid breaking the build.",
        "vibecoder_summary": "Imagine you're the captain of a ship, and this file is your navigation chart. It tells your ship how to sail smoothly through the waters of web development. Adjust the sails (settings) carefully to avoid stormy seas!",
        "edit_points": "Look for the exported configuration object at the bottom of the file. This is where you can add or modify settings."
      }
    },
    {
      "path": "offdeal-frontend/src/types.ts",
      "language": "ts",
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the blueprint for the Offdeal frontend. It defines the shapes and structures of data that the application will use, ensuring everything fits together nicely.",
      "skipped": false,
      "skipReason": null,
      "size": 812,
      "lines": 35,
      "hash": "1bd2fa91776d3fae71e38a0a2879319fa0c17ac5d49adaa1b12c55eb3fce4d52",
      "mtime": 1757602652.9989088,
      "summary": {
        "title": "Type Definitions for Offdeal Frontend",
        "purpose": "This file contains TypeScript type definitions that are used throughout the Offdeal frontend application to ensure type safety and improve code quality.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [],
        "how_to_modify": "You can add new type definitions or interfaces as needed to support new features or components in the application. Ensure that any new types are well-documented and follow existing conventions.",
        "risks": "Adding or modifying types incorrectly can lead to type errors throughout the application, making it difficult to compile or run. Ensure that you test any changes thoroughly.",
        "blurb": "Think of this file as the blueprint for the Offdeal frontend. It defines the shapes and structures of data that the application will use, ensuring everything fits together nicely.",
        "dev_summary": "Defines TypeScript types for the Offdeal frontend. No functions or classes present. Ensure consistency when adding new types.",
        "vibecoder_summary": "Imagine this file as a recipe book for your favorite dish. It lists all the ingredients (types) needed to create the perfect meal (application), ensuring that every bite is just right!",
        "edit_points": "Look for areas where new features are being implemented or where existing data structures need clarification. Pay attention to naming conventions and documentation style."
      }
    },
    {
      "path": "offdeal-frontend/src/app/layout.tsx",
      "language": "ts",
      "exports": [
        "default"
      ],
      "imports": [
        {
          "raw": "./globals.css",
          "kind": "esm"
        },
        {
          "raw": "next",
          "kind": "esm"
        }
      ],
      "functions": [
        {
          "name": "RootLayout",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        }
      ],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": "nextjs",
        "isRoute": true,
        "isReactComponent": true,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "The layout component is like the frame of a picture, holding everything together and providing a consistent look and feel across the Offdeal app.",
      "skipped": false,
      "skipReason": null,
      "size": 324,
      "lines": 14,
      "hash": "f7f47f65ab000db910b5a147da23461abab11f99b071cb5877e98051b53b7a9a",
      "mtime": 1757602652.9981987,
      "summary": {
        "title": "Layout Component for Offdeal Frontend",
        "purpose": "This file defines the layout structure for the Offdeal frontend application, serving as a wrapper for the main content and ensuring consistent styling and structure across different pages.",
        "key_functions": [],
        "internal_dependencies": [
          "offdeal-frontend/src/app/globals.css"
        ],
        "external_dependencies": [
          "next"
        ],
        "how_to_modify": "To modify the layout, you can edit the JSX structure within this file. If you need to change styles, update the 'globals.css' file. Ensure that any new components added are properly imported and used within the layout.",
        "risks": "Changes to the layout structure may affect the overall appearance and functionality of the application. Be cautious when modifying styles or adding new components, as this could lead to inconsistencies or layout issues across different pages.",
        "blurb": "The layout component is like the frame of a picture, holding everything together and providing a consistent look and feel across the Offdeal app.",
        "dev_summary": "This TypeScript file implements a layout component for a Next.js application. It interfaces with global styles and serves as a base for routing. Ensure to check for any layout-breaking changes when modifying.",
        "vibecoder_summary": "Imagine this layout as the cozy living room of your app, where all the guests (pages) come to hang out. You can rearrange the furniture (components) or change the wallpaper (styles) to make it feel just right, but be careful not to knock down any walls!",
        "edit_points": []
      }
    },
    {
      "path": "offdeal-frontend/src/app/page.tsx",
      "language": "ts",
      "exports": [
        "default"
      ],
      "imports": [
        {
          "raw": "react",
          "kind": "esm"
        },
        {
          "raw": "../lib/api",
          "kind": "esm"
        },
        {
          "raw": "../types",
          "kind": "esm"
        }
      ],
      "functions": [
        {
          "name": "Page",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleCreateProspect",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleEditProspect",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleUpdateProspect",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleGenerateDeck",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleRenderAndDownload",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleRefreshPdf",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleOpenDeck",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleOpenEmail",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "toggleEmailSent",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleGenerateEmails",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "selectEmail",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "DeckEditor",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "save",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleAIEdit",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "EmailEditor",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "save",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        },
        {
          "name": "handleAIEdit",
          "params": [],
          "decorators": [],
          "calls": [],
          "sideEffects": [
            "render"
          ]
        }
      ],
      "classes": [],
      "routes": [
        {
          "method": "GET",
          "path": "/",
          "handler": "default"
        }
      ],
      "symbols": {
        "constants": [],
        "hooks": [
          "useState",
          "useEffect",
          "useMemo"
        ],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": "nextjs",
        "isRoute": true,
        "isReactComponent": true,
        "isAPI": false,
        "isClientComponent": true
      },
      "warnings": [],
      "blurb": "This is the heart of your page, where all the magic happens! It's like the stage where your actors (components) perform their roles, and the audience (users) interact with them.",
      "skipped": false,
      "skipReason": null,
      "size": 41334,
      "lines": 983,
      "hash": "8cfa15ce3da2bbab33e15b6cab30e6865d9bf86381e9a45d2f8911be0bff56b6",
      "mtime": 1757602652.9985085,
      "summary": {
        "title": "Page Component in Next.js",
        "purpose": "This file defines a React component that serves as a page in a Next.js application, handling client-side rendering and state management.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [
          "react",
          "../lib/api",
          "../types"
        ],
        "how_to_modify": "To modify this component, you can add or update hooks like useState, useEffect, or useMemo to manage state and side effects. Ensure that any changes align with the routing and rendering logic of Next.js.",
        "risks": "Modifying state management or side effects without understanding the component's lifecycle could lead to unexpected behavior or performance issues. Additionally, changes to the routing logic may affect navigation.",
        "blurb": "This is the heart of your page, where all the magic happens! It's like the stage where your actors (components) perform their roles, and the audience (users) interact with them.",
        "dev_summary": "Defines a client-side page component in Next.js using React hooks for state and effects. No direct functions or classes are defined, but it relies on external libraries for API interactions and type definitions.",
        "vibecoder_summary": "Imagine this file as a cozy little caf\u00e9 where your React components gather to chat and share stories. The hooks are like the baristas, brewing up fresh coffee (state) and serving it just in time (effects) to keep the conversations lively!",
        "edit_points": []
      }
    },
    {
      "path": "offdeal-frontend/src/app/globals.css",
      "language": "other",
      "exports": [],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {},
      "warnings": [
        "Schema validation failed: 1 validation error for FileNodeModel\nlanguage\n  Input should be 'js', 'ts' or 'py' [type=literal_error, input_value='other', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.9/v/literal_error"
      ],
      "blurb": "Invalid file entry",
      "skipped": true,
      "skipReason": "validation_failed",
      "size": 2408,
      "lines": 128,
      "hash": "2ab6c631cbd7a617b4bf441b1f19c465799f92833058e0fd489d0df0391a6867",
      "mtime": 1757602652.9987152
    },
    {
      "path": "offdeal-frontend/src/lib/api.ts",
      "language": "ts",
      "exports": [
        "named"
      ],
      "imports": [],
      "functions": [],
      "classes": [],
      "routes": [],
      "symbols": {
        "constants": [],
        "hooks": [],
        "dbModels": [],
        "middleware": [],
        "components": [],
        "utilities": []
      },
      "hints": {
        "framework": null,
        "isRoute": false,
        "isReactComponent": false,
        "isAPI": false
      },
      "warnings": [],
      "blurb": "Think of this file as the post office of your application, managing all the messages sent to and from the server. Changes here can affect how well your app communicates with the outside world.",
      "skipped": false,
      "skipReason": null,
      "size": 3034,
      "lines": 96,
      "hash": "91e09c0b8d4869a95889089a058eead203a4cfb1b1ad9550fe7435036c325804",
      "mtime": 1757602652.9992561,
      "summary": {
        "title": "API Module",
        "purpose": "This TypeScript file serves as a library for handling API interactions within the offdeal-frontend application.",
        "key_functions": [],
        "internal_dependencies": [],
        "external_dependencies": [],
        "how_to_modify": "You can add new functions to handle specific API requests or modify existing ones to change how data is fetched or sent. Ensure to maintain TypeScript types for consistency.",
        "risks": "Modifying this file without understanding the API structure may lead to broken functionality or runtime errors. Be cautious about changing data handling logic, as it could affect multiple parts of the application.",
        "blurb": "Think of this file as the post office of your application, managing all the messages sent to and from the server. Changes here can affect how well your app communicates with the outside world.",
        "dev_summary": "This file is designed for API interactions but currently lacks defined functions or classes. It may serve as a placeholder for future development. Ensure to define clear interfaces for any new API methods added.",
        "vibecoder_summary": "Imagine this file as a blank canvas waiting for an artist to paint it with vibrant API calls. Each brushstroke (or function) you add will help your application tell its story to the server and back!",
        "edit_points": "Look for areas where you can define new functions for API requests. Consider adding error handling and response parsing to ensure robust communication."
      }
    }
  ],
  "metadata": {
    "total_files": 42,
    "generated_at": "2024-01-15T00:00:00Z"
  },
  "generatedAt": "2025-09-12T00:54:45.521588+00:00"
}